


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ********************//**
    2 00000000         ; * @file     startup_LPC17xx.s
    3 00000000         ; * @brief    CMSIS Cortex-M3 Core Device Startup File f
                       or
    4 00000000         ; *           NXP LPC17xx Device Series
    5 00000000         ; * @version  V1.10
    6 00000000         ; * @date     06. April 2011
    7 00000000         ; *
    8 00000000         ; * @note
    9 00000000         ; * Copyright (C) 2009-2011 ARM Limited. All rights rese
                       rved.
   10 00000000         ; *
   11 00000000         ; * @par
   12 00000000         ; * ARM Limited (ARM) is supplying this software for use
                        with Cortex-M
   13 00000000         ; * processor based microcontrollers.  This file can be 
                       freely distributed
   14 00000000         ; * within development tools that are supporting such AR
                       M based processors.
   15 00000000         ; *
   16 00000000         ; * @par
   17 00000000         ; * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, W
                       HETHER EXPRESS, IMPLIED
   18 00000000         ; * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED
                        WARRANTIES OF
   19 00000000         ; * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
                        APPLY TO THIS SOFTWARE.
   20 00000000         ; * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR S
                       PECIAL, INCIDENTAL, OR
   21 00000000         ; * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
   22 00000000         ; *
   23 00000000         ; ******************************************************
                       ************************/
   24 00000000         
   25 00000000         ; *------- <<< Use Configuration Wizard in Context Menu 
                       >>> ------------------
   26 00000000         
   27 00000000         ; <h> Stack Configuration
   28 00000000         ;   <o> Stack Size (in Bytes) <0x0-0xFFFFFFFF:8>
   29 00000000         ; </h>
   30 00000000         
   31 00000000 00000200 
                       Stack_Size
                               EQU              0x00000200
   32 00000000         
   33 00000000                 AREA             STACK, NOINIT, READWRITE, ALIGN
=3
   34 00000000         Stack_Mem
                               SPACE            Stack_Size
   35 00000200         __initial_sp
   36 00000200         
   37 00000200         
   38 00000200         ; <h> Heap Configuration
   39 00000200         ;   <o>  Heap Size (in Bytes) <0x0-0xFFFFFFFF:8>
   40 00000200         ; </h>
   41 00000200         
   42 00000200 00000000 
                       Heap_Size



ARM Macro Assembler    Page 2 


                               EQU              0x00000000
   43 00000200         
   44 00000200                 AREA             HEAP, NOINIT, READWRITE, ALIGN=
3
   45 00000000         __heap_base
   46 00000000         Heap_Mem
                               SPACE            Heap_Size
   47 00000000         __heap_limit
   48 00000000         
   49 00000000         
   50 00000000                 PRESERVE8
   51 00000000                 THUMB
   52 00000000         
   53 00000000         
   54 00000000         ; Vector Table Mapped to Address 0 at Reset
   55 00000000         
   56 00000000                 AREA             RESET, DATA, READONLY
   57 00000000                 EXPORT           __Vectors
   58 00000000         
   59 00000000 00000000 
                       __Vectors
                               DCD              __initial_sp ; Top of Stack
   60 00000004 00000000        DCD              Reset_Handler ; Reset Handler
   61 00000008 00000000        DCD              NMI_Handler ; NMI Handler
   62 0000000C 00000000        DCD              HardFault_Handler ; Hard Fault 
                                                            Handler
   63 00000010 00000000        DCD              MemManage_Handler 
                                                            ; MPU Fault Handler
                                                            
   64 00000014 00000000        DCD              BusFault_Handler 
                                                            ; Bus Fault Handler
                                                            
   65 00000018 00000000        DCD              UsageFault_Handler ; Usage Faul
                                                            t Handler
   66 0000001C 00000000        DCD              0           ; Reserved
   67 00000020 00000000        DCD              0           ; Reserved
   68 00000024 00000000        DCD              0           ; Reserved
   69 00000028 00000000        DCD              0           ; Reserved
   70 0000002C 00000000        DCD              SVC_Handler ; SVCall Handler
   71 00000030 00000000        DCD              DebugMon_Handler ; Debug Monito
                                                            r Handler
   72 00000034 00000000        DCD              0           ; Reserved
   73 00000038 00000000        DCD              PendSV_Handler ; PendSV Handler
                                                            
   74 0000003C 00000000        DCD              SysTick_Handler 
                                                            ; SysTick Handler
   75 00000040         
   76 00000040         ; External Interrupts
   77 00000040 00000000        DCD              WDT_IRQHandler ; 16: Watchdog T
                                                            imer
   78 00000044 00000000        DCD              TIMER0_IRQHandler ; 17: Timer0
   79 00000048 00000000        DCD              TIMER1_IRQHandler ; 18: Timer1
   80 0000004C 00000000        DCD              TIMER2_IRQHandler ; 19: Timer2
   81 00000050 00000000        DCD              TIMER3_IRQHandler ; 20: Timer3
   82 00000054 00000000        DCD              UART0_IRQHandler ; 21: UART0
   83 00000058 00000000        DCD              UART1_IRQHandler ; 22: UART1
   84 0000005C 00000000        DCD              UART2_IRQHandler ; 23: UART2
   85 00000060 00000000        DCD              UART3_IRQHandler ; 24: UART3
   86 00000064 00000000        DCD              PWM1_IRQHandler ; 25: PWM1



ARM Macro Assembler    Page 3 


   87 00000068 00000000        DCD              I2C0_IRQHandler ; 26: I2C0
   88 0000006C 00000000        DCD              I2C1_IRQHandler ; 27: I2C1
   89 00000070 00000000        DCD              I2C2_IRQHandler ; 28: I2C2
   90 00000074 00000000        DCD              SPI_IRQHandler ; 29: SPI
   91 00000078 00000000        DCD              SSP0_IRQHandler ; 30: SSP0
   92 0000007C 00000000        DCD              SSP1_IRQHandler ; 31: SSP1
   93 00000080 00000000        DCD              PLL0_IRQHandler ; 32: PLL0 Lock
                                                             (Main PLL)
   94 00000084 00000000        DCD              RTC_IRQHandler ; 33: Real Time 
                                                            Clock
   95 00000088 00000000        DCD              EINT0_IRQHandler ; 34: External
                                                             Interrupt 0
   96 0000008C 00000000        DCD              EINT1_IRQHandler ; 35: External
                                                             Interrupt 1
   97 00000090 00000000        DCD              EINT2_IRQHandler ; 36: External
                                                             Interrupt 2
   98 00000094 00000000        DCD              EINT3_IRQHandler ; 37: External
                                                             Interrupt 3
   99 00000098 00000000        DCD              ADC_IRQHandler 
                                                            ; 38: A/D Converter
                                                            
  100 0000009C 00000000        DCD              BOD_IRQHandler ; 39: Brown-Out 
                                                            Detect
  101 000000A0 00000000        DCD              USB_IRQHandler ; 40: USB
  102 000000A4 00000000        DCD              CAN_IRQHandler ; 41: CAN
  103 000000A8 00000000        DCD              DMA_IRQHandler ; 42: General Pu
                                                            rpose DMA
  104 000000AC 00000000        DCD              I2S_IRQHandler ; 43: I2S
  105 000000B0 00000000        DCD              ENET_IRQHandler ; 44: Ethernet
  106 000000B4 00000000        DCD              RIT_IRQHandler ; 45: Repetitive
                                                             Interrupt Timer
  107 000000B8 00000000        DCD              MCPWM_IRQHandler ; 46: Motor Co
                                                            ntrol PWM
  108 000000BC 00000000        DCD              QEI_IRQHandler ; 47: Quadrature
                                                             Encoder Interface
  109 000000C0 00000000        DCD              PLL1_IRQHandler ; 48: PLL1 Lock
                                                             (USB PLL)
  110 000000C4 00000000        DCD              USBActivity_IRQHandler ; 49: US
                                                            B Activity interrup
                                                            t to wakeup
  111 000000C8 00000000        DCD              CANActivity_IRQHandler ; 50: CA
                                                            N Activity interrup
                                                            t to wakeup
  112 000000CC         
  113 000000CC         
  114 000000CC                 IF               :LNOT::DEF:NO_CRP
  115 000000CC                 AREA             |.ARM.__at_0x02FC|, CODE, READO
NLY
  116 00000000 FFFFFFFF 
                       CRP_Key DCD              0xFFFFFFFF
  117 00000004                 ENDIF
  118 00000004         
  119 00000004 E000ED2C 
                       HradFaaultStatusRegister
                               EQU              0xE000ED2C
  120 00000004 E000ED24 
                       SystemHandlerControl
                               EQU              0xE000ED24
  121 00000004 E000ED29 



ARM Macro Assembler    Page 4 


                       BusFaultStatusRegister
                               EQU              0xE000ED29
  122 00000004 E000ED38 
                       BusFaultAddressRegister
                               EQU              0xE000ED38
  123 00000004         
  124 00000004         ;SYS_TICK
  125 00000004 E000E010 
                       SysControlAndStatusRegister
                               EQU              0xE000E010
  126 00000004 E000E014 
                       SysReloadValueRegister
                               EQU              0xE000E014
  127 00000004 E000E018 
                       SysCurrentValueRegister
                               EQU              0xE000E018
  128 00000004         
  129 00000004         ;          AREA ,PSTACK,READWRITE, ALIGN 3
  130 00000004         ;       SPACE   800
  131 00000004         ;initial_psp  ; POINTS TO THE START OF THIS AREA     
  132 00000004         
  133 00000004                 AREA             |.text|, CODE, READONLY
  134 00000000         
  135 00000000         
  136 00000000         ; Reset Handler
  137 00000000         
  138 00000000         Reset_Handler
                               PROC
  139 00000000                 EXPORT           Reset_Handler             [WEAK
]
  140 00000000         
  141 00000000         ;-----------------------SystemHandlerControl------------
                       ---------------
  142 00000000         ;1
  143 00000000 4835            LDR              R0,=SystemHandlerControl
  144 00000002 6801            LDR              R1,[R0]
  145 00000004         ;FORCE BIT 18 TO BE 1
  146 00000004 F04F 0207       MOV              R2,#2_111   ; BINARY 111
  147 00000008 EA4F 4302       LSL              R3,R2,#16   ; WE WANT TO SET BI
                                                            TS 16 17 18  SO 111
                                                             WILL BE SHIFTED 16
                                                             BITS TO THER LEFT 
                                                            AND CAN SET BITS 16
                                                             17 18
  148 0000000C EA41 0103       ORR              R1,R3       ; USAGE FAULT ENABL
                                                            ED
  149 00000010 6001            STR              R1,[R0]
  150 00000012         ;-------------------------------SVC---------------------
                       --------------------- 
  151 00000012         ;2
  152 00000012         ;move to user level
  153 00000012 F3EF 8514       MRS              R5,CONTROL
  154 00000016 F045 0501       ORR              R5,#1       ; FORCE FIRST BIT T
                                                            O 1 TO ENABLE IT
  155 0000001A F385 8814       MSR              CONTROL,R5  ; NOW WE ARE IN USE
                                                            R LEVEL
  156 0000001E         
  157 0000001E         ;4    ;ONCE WHEN WE WENT TO THE USER LEVEL IF WE TRY TO 
                       COME BACK TO THE PRIVILEDGE LEVEL IT IS NOT POSSIBLE



ARM Macro Assembler    Page 5 


  158 0000001E         ;move to PRIVILEDGE LEVEL
  159 0000001E F3EF 8514       MRS              R5,CONTROL
  160 00000022 F025 0501       BIC              R5,#1       ; FORCE FIRST BIT T
                                                            O 0 TO GO TO PRIVIL
                                                            EDGE LEVEL
  161 00000026 F385 8814       MSR              CONTROL,R5  ; THIS INSTRUCTION 
                                                            WILL NOT WORK THIS 
                                                            TIME BECAUSE WE ARE
                                                             IN USER LEVEL AND 
                                                            CAN NOT GO BACK TO 
                                                            PRIVILEDGE LEVEL
  162 0000002A         
  163 0000002A         ;5    ;SOLUTION TO MOVE TO PRIVILEDGE LEVEL WHEN WE ARE 
                       IN USER LEVEL IS USING SUPERVISOR CALLS
  164 0000002A DF10            SVC              16          ; AS AN EXAMPLE WHE
                                                            N WE CALL SVC 16 WE
                                                             CAN GO BACK TO PRI
                                                            VILEDGE LEVEL
  165 0000002C DF19            SVC              25          ; AS AN EXAMPLE WHE
                                                            N WE CALL SVC 25 WE
                                                             CAN GO BACK TO USE
                                                            R LEVEL
  166 0000002E         ; WE JUMP TO SUPERVISOR HANDLER
  167 0000002E         
  168 0000002E         ;WHEN WE EXECUTE INSTRUCTIONS FROM ABOVE THAT WE HAVE Sy
                       stemHandlerControl 
  169 0000002E         ;AND THEN WE ENABLE USER LEVEL HERE A BUASFAULT WILL HAP
                       PEN 
  170 0000002E         ;BECAUSE SystemHandlerControl IS IN PRIVILEDGE LEVEL 
  171 0000002E         ;3    
  172 0000002E 482A            LDR              R0,=SystemHandlerControl
  173 00000030 6801            LDR              R1,[R0]
  174 00000032         ; AFTER THIS INSTRUCTION WE WILL JUMP TO BAUSFAULT
  175 00000032         
  176 00000032         
  177 00000032         ;--------------------------------------------------     
                       
  178 00000032         
  179 00000032 F3EF 8814       MRS              R8,CONTROL
  180 00000036 F048 0802       ORR              R8,#2       ;0010;force bit 2 t
                                                            o 1
  181 0000003A F388 8814       MSR              CONTROL,R8
  182 0000003E         
  183 0000003E         ;    LDR R0,=initial_psp
  184 0000003E         ;    MSR PSP,R0
  185 0000003E         
  186 0000003E B402            PUSH             {R1}
  187 00000040         
  188 00000040         
  189 00000040         ;--------------------HradFaault-------------------------
                       -----     
  190 00000040         ;HradFaault              
  191 00000040 F20F 002C 
              F100 0000        ADRL             R0,Label
  192 00000048 4700            BX               R0
  193 0000004A         
  194 0000004A         
  195 0000004A         
  196 0000004A         ;------------------SYS_TICK-----------------------------



ARM Macro Assembler    Page 6 


                       --------------      
  197 0000004A         
  198 0000004A 4824            LDR              R0,=SysControlAndStatusRegister
  199 0000004C         
  200 0000004C         ;1-FORCE FIRST BIT OF TO 0 TO STOP THE TIMER AT FIRST:
  201 0000004C F04F 0100       MOV              R1,#0
  202 00000050 6001            STR              R1,[R0]
  203 00000052         
  204 00000052         ;2-SET INITIAL VALUE TO THE TIMER
  205 00000052 4823            LDR              R0,=SysReloadValueRegister
  206 00000054 F240 31FF       MOV              R1,1023     ; AS EXAMPLE INITIA
                                                            L TIMER BY 1023
  207 00000058 6001            STR              R1,[R0]
  208 0000005A         
  209 0000005A         ;3-SET SysCurrentValueRegister TO THE INITIAL VALUE
  210 0000005A 4822            LDR              R0,=SysCurrentValueRegister
  211 0000005C 6001            STR              R1,[R0]
  212 0000005E         
  213 0000005E         ;4- SET BIT 0 TO ENABLE TIMER SET BIT 1 TO ENABLE EXCEPT
                       ION SET BIT 2 TO USE INTERNAL SYS CLOCK SO WE SET 7 MEAN
                       S 111
  214 0000005E 481F            LDR              R0,=SysControlAndStatusRegister
  215 00000060 F04F 0107       MOV              R1,#7
  216 00000064 6001            STR              R1,[R0]     ; HERE TIMER STARTS
                                                             COUNTING
  217 00000066         
  218 00000066         ;EXAMPLE WE WANT TO EXECUTE 10 TIMES THIS LOOP TO HAVE I
                       NFINITE LOOP BUT WE UPDATE R4 IN SYS_TICK HANDLER
  219 00000066 F04F 0400       MOV              R4,#0
  220 0000006A         
  221 0000006A 2C0A    TIMERLOOP
                               CMP              R4,#10
  222 0000006C D1FD            BNE              TIMERLOOP
  223 0000006E         ; AFTER PASSING 1023 CLOCK CYCLE WE WILL BE IN SYS_TICK 
                       HANDLER
  224 0000006E         
  225 0000006E         ; SO AFTER 10 TIMES THE INFINITE LOOP WILL END BECAUSE E
                       ACH TIME WE INC R4 +1 SO AFTER 10 TIMES IT WILL RWACH TO
                        10 AND THE LOOP WILL BE FINISHED
  226 0000006E         
  227 0000006E         
  228 0000006E         
  229 0000006E E7FE    STOP    B                STOP
  230 00000070         
  231 00000070 4608    Label   MOV              R0,R1
  232 00000072         
  233 00000072                 ENDP
  234 00000072         
  235 00000072         
  236 00000072         ; Dummy Exception Handlers (infinite loops which can be 
                       modified)
  237 00000072         
  238 00000072         NMI_Handler
                               PROC
  239 00000072                 EXPORT           NMI_Handler               [WEAK
]
  240 00000072 E7FE            B                .
  241 00000074                 ENDP
  243 00000074         HardFault_Handler



ARM Macro Assembler    Page 7 


                               PROC
  244 00000074                 EXPORT           HardFault_Handler         [WEAK
]
  245 00000074 481C            LDR              R0,=HradFaaultStatusRegister
  246 00000076         
  247 00000076 6801            LDR              R1,[R0]
  248 00000078         
  249 00000078         ;HERE WE ARE SURE THE VALUE OF R1 IS 0X40000000 OR 0X800
                       00000
  250 00000078         ;WE NEED A MASK TO CHECK BIT 30
  251 00000078 F091 4F80       TEQ              R1,#0X40000000 ; IF RESULT IS N
                                                            OT ZERO MEANS THE R
                                                            ESULT IS SET
  252 0000007C D002            BEQ              NotEnableDException
  253 0000007E         
  254 0000007E         ;WE NEED A MASK TO CHECK BIT 31
  255 0000007E F091 4F00       TEQ              R1,#0X80000000 ; IF RESULT IS N
                                                            OT ZERO MEANS THE R
                                                            ESULT IS SET
  256 00000082 D0FF            BEQ              DebugException
  257 00000084         
  258 00000084         NotEnableDException
  259 00000084         
  260 00000084         
  261 00000084         DebugException
  262 00000084         
  263 00000084 E7FE            B                .
  264 00000086                 ENDP
  266 00000086         MemManage_Handler
                               PROC
  267 00000086                 EXPORT           MemManage_Handler         [WEAK
]
  268 00000086 E7FE            B                .
  269 00000088                 ENDP
  271 00000088         BusFault_Handler
                               PROC
  272 00000088                 EXPORT           BusFault_Handler          [WEAK
]
  273 00000088         
  274 00000088 4918            LDR              R1,=BusFaultStatusRegister ;  W
                                                            E WANT TO SEE WHAT 
                                                            WAS THE REASON OF T
                                                            HE FAULT SO WE LOAD
                                                             BusFaultStatusRegi
                                                            ster
  275 0000008A         ;EXAMPLE: 82: 10000010--> SECOND BIT IS SET SO IT IS A P
                       RECIZE FAULT, BIT 7 IS SET MEANS THAT THE BusFaultAddres
                       sRegister CONNTAINS A VALID ADDRESS BUS
  276 0000008A 780A            LDRB             R2,[R1]     ; BusFaultStatusReg
                                                            ister  IS A BYTE SO
                                                             WE NEED TO USE LDR
                                                            B  
  277 0000008C         ; R2 CONTAINS THE EXPLANATIONS OF BUSFAULT
  278 0000008C         
  279 0000008C 4818            LDR              R0,=BusFaultAddressRegister ; C
                                                            ONTAINS THE ADDRESS
                                                             OF THE REASON THAT
                                                             CAUSE THIS EXCEPTI
                                                            ON



ARM Macro Assembler    Page 8 


  280 0000008E 6803            LDR              R3,[R0]     ;  THIS IS A WORD S
                                                            O WE USE LDR  
  281 00000090         ; R3 CONTAINS THE OFFENDING ADDRESS IF THE FAULT WAS PRE
                       CIZE
  282 00000090         
  283 00000090 E7FE            B                .
  284 00000092                 ENDP
  286 00000092         UsageFault_Handler
                               PROC
  287 00000092                 EXPORT           UsageFault_Handler        [WEAK
]
  288 00000092 E7FE            B                .
  289 00000094                 ENDP
  290 00000094         SVC_Handler
                               PROC
  291 00000094                 EXPORT           SVC_Handler               [WEAK
]
  292 00000094         
  293 00000094         ;THRED MODE CAN USE BOTH MAIN AND PSP STACK
  294 00000094         ;HANDLER MODE ALWAYS USE MAIN STACK
  295 00000094         
  296 00000094         ; IF BIT 2 OF LR IS 0 MEANS IT USES MSP OTHERWISE IT USE
                       S PSP
  297 00000094 F01E 0F02       TST              LR,#2
  298 00000098 BF0C F3EF 
              8608             MRSEQ            R6,MSP
  299 0000009E F3EF 8609       MRSNE            R6,PSP
  300 000000A2         
  301 000000A2         ;NOW R6 IS THE STACK POINTER WHERE REGISTERS SAVED
  302 000000A2         ;STACK:
  303 000000A2         ;PSR +28  
  304 000000A2         ;PC  +24
  305 000000A2         ;LR  +20
  306 000000A2         ;R12 +16
  307 000000A2         ;R3  +12
  308 000000A2         ;R2  +8
  309 000000A2         ;R1  +4
  310 000000A2         ;R0   0
  311 000000A2 69B5            LDR              R5,[R6,24]  ; IN THE STACK ABOV
                                                            E START FROM R0 WE 
                                                            NEED TO GO UP 6 CEL
                                                            LS TO GET PC, EACH 
                                                            CELL IS 4 BYTE SO W
                                                            E ADD R6+(6*4)
  312 000000A4         ; SVC IS THUMB INSTRUCTION, NOW PC PONITS TO NEXT INSTRU
                       CTION WE NEED TO GO BACK 2 BYTES TO FE0TCH CURRENT INSTR
                       UCTION
  313 000000A4 F815 4C02       LDRB             R4,[R5,-2]  ; READ INSTRUCTION 
                                                            POINTED BY PC
  314 000000A8         
  315 000000A8 2C10            CMP              R4,#16      ; AT FIRST WE CALLE
                                                            D SVC 16 TO GO BACK
                                                             TO PRIVILEDGE LEVE
                                                            L
  316 000000AA D0FF            BEQ              MOVETOPRIVILEDGE
  317 000000AC         
  318 000000AC         ;ELSE IF 25--> CMP R4,#25   ; AT FIRST WE CALLED SVC 25 
                       TO GO TO USER LEVEL
  319 000000AC         



ARM Macro Assembler    Page 9 


  320 000000AC         MOVETOPRIVILEDGE                     ;move to PRIVILEDGE
                                                             LEVEL
  321 000000AC F3EF 8514       MRS              R5,CONTROL
  322 000000B0 F025 0501       BIC              R5,#1       ; FORCE FIRST BIT T
                                                            O 0 TO GO TO PRIVIL
                                                            EDGE LEVEL
  323 000000B4 F385 8814       MSR              CONTROL,R5  ;
  324 000000B8         ;HERE WE WILL BE IN PRIVILEDGE LEVEL
  325 000000B8         
  326 000000B8 4770            BX               LR          ; RETURN ABOVE TO W
                                                            HERE WE CALEED SVC 
                                                            AT FIRST
  327 000000BA         
  328 000000BA E7FE            B                .
  329 000000BC                 ENDP
  331 000000BC         DebugMon_Handler
                               PROC
  332 000000BC                 EXPORT           DebugMon_Handler          [WEAK
]
  333 000000BC E7FE            B                .
  334 000000BE                 ENDP
  335 000000BE         PendSV_Handler
                               PROC
  336 000000BE                 EXPORT           PendSV_Handler            [WEAK
]
  337 000000BE E7FE            B                .
  338 000000C0                 ENDP
  339 000000C0         SysTick_Handler
                               PROC
  340 000000C0                 EXPORT           SysTick_Handler           [WEAK
]
  341 000000C0         ; WHEN WE ENTER HERE SOME CLOCK CYCLE HAS PASSED 
  342 000000C0 F104 0401       ADD              R4,#1
  343 000000C4 4770            BX               LR          ;RETURN BACK ABOVE 
                                                            TO TIMERLOOP AND R4
                                                             IS INCREASED +1
  344 000000C6         
  345 000000C6         
  346 000000C6         
  347 000000C6 E7FE            B                .
  348 000000C8                 ENDP
  349 000000C8         
  350 000000C8         Default_Handler
                               PROC
  351 000000C8         
  352 000000C8                 EXPORT           WDT_IRQHandler            [WEAK
]
  353 000000C8                 EXPORT           TIMER0_IRQHandler         [WEAK
]
  354 000000C8                 EXPORT           TIMER1_IRQHandler         [WEAK
]
  355 000000C8                 EXPORT           TIMER2_IRQHandler         [WEAK
]
  356 000000C8                 EXPORT           TIMER3_IRQHandler         [WEAK
]
  357 000000C8                 EXPORT           UART0_IRQHandler          [WEAK
]
  358 000000C8                 EXPORT           UART1_IRQHandler          [WEAK
]



ARM Macro Assembler    Page 10 


  359 000000C8                 EXPORT           UART2_IRQHandler          [WEAK
]
  360 000000C8                 EXPORT           UART3_IRQHandler          [WEAK
]
  361 000000C8                 EXPORT           PWM1_IRQHandler           [WEAK
]
  362 000000C8                 EXPORT           I2C0_IRQHandler           [WEAK
]
  363 000000C8                 EXPORT           I2C1_IRQHandler           [WEAK
]
  364 000000C8                 EXPORT           I2C2_IRQHandler           [WEAK
]
  365 000000C8                 EXPORT           SPI_IRQHandler            [WEAK
]
  366 000000C8                 EXPORT           SSP0_IRQHandler           [WEAK
]
  367 000000C8                 EXPORT           SSP1_IRQHandler           [WEAK
]
  368 000000C8                 EXPORT           PLL0_IRQHandler           [WEAK
]
  369 000000C8                 EXPORT           RTC_IRQHandler            [WEAK
]
  370 000000C8                 EXPORT           EINT0_IRQHandler          [WEAK
]
  371 000000C8                 EXPORT           EINT1_IRQHandler          [WEAK
]
  372 000000C8                 EXPORT           EINT2_IRQHandler          [WEAK
]
  373 000000C8                 EXPORT           EINT3_IRQHandler          [WEAK
]
  374 000000C8                 EXPORT           ADC_IRQHandler            [WEAK
]
  375 000000C8                 EXPORT           BOD_IRQHandler            [WEAK
]
  376 000000C8                 EXPORT           USB_IRQHandler            [WEAK
]
  377 000000C8                 EXPORT           CAN_IRQHandler            [WEAK
]
  378 000000C8                 EXPORT           DMA_IRQHandler            [WEAK
]
  379 000000C8                 EXPORT           I2S_IRQHandler            [WEAK
]
  380 000000C8                 EXPORT           ENET_IRQHandler           [WEAK
]
  381 000000C8                 EXPORT           RIT_IRQHandler            [WEAK
]
  382 000000C8                 EXPORT           MCPWM_IRQHandler          [WEAK
]
  383 000000C8                 EXPORT           QEI_IRQHandler            [WEAK
]
  384 000000C8                 EXPORT           PLL1_IRQHandler           [WEAK
]
  385 000000C8                 EXPORT           USBActivity_IRQHandler    [WEAK
]
  386 000000C8                 EXPORT           CANActivity_IRQHandler    [WEAK
]
  387 000000C8         
  388 000000C8         WDT_IRQHandler
  389 000000C8         TIMER0_IRQHandler



ARM Macro Assembler    Page 11 


  390 000000C8         TIMER1_IRQHandler
  391 000000C8         TIMER2_IRQHandler
  392 000000C8         TIMER3_IRQHandler
  393 000000C8         UART0_IRQHandler
  394 000000C8         UART1_IRQHandler
  395 000000C8         UART2_IRQHandler
  396 000000C8         UART3_IRQHandler
  397 000000C8         PWM1_IRQHandler
  398 000000C8         I2C0_IRQHandler
  399 000000C8         I2C1_IRQHandler
  400 000000C8         I2C2_IRQHandler
  401 000000C8         SPI_IRQHandler
  402 000000C8         SSP0_IRQHandler
  403 000000C8         SSP1_IRQHandler
  404 000000C8         PLL0_IRQHandler
  405 000000C8         RTC_IRQHandler
  406 000000C8         EINT0_IRQHandler
  407 000000C8         EINT1_IRQHandler
  408 000000C8         EINT2_IRQHandler
  409 000000C8         EINT3_IRQHandler
  410 000000C8         ADC_IRQHandler
  411 000000C8         BOD_IRQHandler
  412 000000C8         USB_IRQHandler
  413 000000C8         CAN_IRQHandler
  414 000000C8         DMA_IRQHandler
  415 000000C8         I2S_IRQHandler
  416 000000C8         ENET_IRQHandler
  417 000000C8         RIT_IRQHandler
  418 000000C8         MCPWM_IRQHandler
  419 000000C8         QEI_IRQHandler
  420 000000C8         PLL1_IRQHandler
  421 000000C8         USBActivity_IRQHandler
  422 000000C8         CANActivity_IRQHandler
  423 000000C8         
  424 000000C8 E7FE            B                .
  425 000000CA         
  426 000000CA                 ENDP
  427 000000CA         
  428 000000CA         
  429 000000CA 00 00           ALIGN
  430 000000CC         
  431 000000CC         
  432 000000CC         ; User Initial Stack & Heap
  433 000000CC         
  434 000000CC                 IF               :DEF:__MICROLIB
  441 000000CC         
  442 000000CC                 IMPORT           __use_two_region_memory
  443 000000CC                 EXPORT           __user_initial_stackheap
  444 000000CC         __user_initial_stackheap
  445 000000CC         
  446 000000CC 4809            LDR              R0, =  Heap_Mem
  447 000000CE 490A            LDR              R1, =(Stack_Mem + Stack_Size)
  448 000000D0 4A08            LDR              R2, = (Heap_Mem +  Heap_Size)
  449 000000D2 4B0A            LDR              R3, = Stack_Mem
  450 000000D4 4770            BX               LR
  451 000000D6         
  452 000000D6 00 00           ALIGN
  453 000000D8         
  454 000000D8                 ENDIF



ARM Macro Assembler    Page 12 


  455 000000D8         
  456 000000D8         
  457 000000D8                 END
              E000ED24 
              E000E010 
              E000E014 
              E000E018 
              E000ED2C 
              E000ED29 
              E000ED38 
              00000000 
              00000200 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\startup_lpc17xx.d -o.\objects\startup_lpc17xx.o -I.\RTE\
Device\LPC1768 -I.\RTE\_Target_1 -IC:\Users\Razi\AppData\Local\Arm\Packs\ARM\CM
SIS\5.8.0\CMSIS\Core\Include -IC:\Users\Razi\AppData\Local\Arm\Packs\Keil\LPC17
00_DFP\2.7.0\Device\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_
VERSION SETA 536" --predefine="_RTE_ SETA 1" --predefine="LPC175x_6x SETA 1" --
predefine="_RTE_ SETA 1" --list=.\listings\startup_lpc17xx.lst RTE\Device\LPC17
68\startup_LPC17xx.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

STACK 00000000

Symbol: STACK
   Definitions
      At line 33 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      None
Comment: STACK unused
Stack_Mem 00000000

Symbol: Stack_Mem
   Definitions
      At line 34 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 447 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 449 in file RTE\Device\LPC1768\startup_LPC17xx.s

__initial_sp 00000200

Symbol: __initial_sp
   Definitions
      At line 35 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 59 in file RTE\Device\LPC1768\startup_LPC17xx.s
Comment: __initial_sp used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

HEAP 00000000

Symbol: HEAP
   Definitions
      At line 44 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      None
Comment: HEAP unused
Heap_Mem 00000000

Symbol: Heap_Mem
   Definitions
      At line 46 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 446 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 448 in file RTE\Device\LPC1768\startup_LPC17xx.s

__heap_base 00000000

Symbol: __heap_base
   Definitions
      At line 45 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      None
Comment: __heap_base unused
__heap_limit 00000000

Symbol: __heap_limit
   Definitions
      At line 47 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      None
Comment: __heap_limit unused
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 56 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 59 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 57 in file RTE\Device\LPC1768\startup_LPC17xx.s
Comment: __Vectors used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.ARM.__at_0x02FC 00000000

Symbol: .ARM.__at_0x02FC
   Definitions
      At line 115 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      None
Comment: .ARM.__at_0x02FC unused
CRP_Key 00000000

Symbol: CRP_Key
   Definitions
      At line 116 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      None
Comment: CRP_Key unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 133 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      None
Comment: .text unused
ADC_IRQHandler 000000C8

Symbol: ADC_IRQHandler
   Definitions
      At line 410 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 99 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 374 in file RTE\Device\LPC1768\startup_LPC17xx.s

BOD_IRQHandler 000000C8

Symbol: BOD_IRQHandler
   Definitions
      At line 411 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 100 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 375 in file RTE\Device\LPC1768\startup_LPC17xx.s

BusFault_Handler 00000088

Symbol: BusFault_Handler
   Definitions
      At line 271 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 64 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 272 in file RTE\Device\LPC1768\startup_LPC17xx.s

CANActivity_IRQHandler 000000C8

Symbol: CANActivity_IRQHandler
   Definitions
      At line 422 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 111 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 386 in file RTE\Device\LPC1768\startup_LPC17xx.s

CAN_IRQHandler 000000C8

Symbol: CAN_IRQHandler
   Definitions
      At line 413 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 102 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 377 in file RTE\Device\LPC1768\startup_LPC17xx.s

DMA_IRQHandler 000000C8

Symbol: DMA_IRQHandler
   Definitions
      At line 414 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 103 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 378 in file RTE\Device\LPC1768\startup_LPC17xx.s

DebugException 00000084

Symbol: DebugException
   Definitions
      At line 261 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 256 in file RTE\Device\LPC1768\startup_LPC17xx.s
Comment: DebugException used once
DebugMon_Handler 000000BC

Symbol: DebugMon_Handler
   Definitions
      At line 331 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 71 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 332 in file RTE\Device\LPC1768\startup_LPC17xx.s

Default_Handler 000000C8

Symbol: Default_Handler
   Definitions
      At line 350 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      None
Comment: Default_Handler unused
EINT0_IRQHandler 000000C8

Symbol: EINT0_IRQHandler
   Definitions
      At line 406 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 95 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 370 in file RTE\Device\LPC1768\startup_LPC17xx.s

EINT1_IRQHandler 000000C8

Symbol: EINT1_IRQHandler
   Definitions
      At line 407 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 96 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 371 in file RTE\Device\LPC1768\startup_LPC17xx.s

EINT2_IRQHandler 000000C8

Symbol: EINT2_IRQHandler
   Definitions
      At line 408 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 97 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 372 in file RTE\Device\LPC1768\startup_LPC17xx.s

EINT3_IRQHandler 000000C8

Symbol: EINT3_IRQHandler
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 409 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 98 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 373 in file RTE\Device\LPC1768\startup_LPC17xx.s

ENET_IRQHandler 000000C8

Symbol: ENET_IRQHandler
   Definitions
      At line 416 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 105 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 380 in file RTE\Device\LPC1768\startup_LPC17xx.s

HardFault_Handler 00000074

Symbol: HardFault_Handler
   Definitions
      At line 243 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 62 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 244 in file RTE\Device\LPC1768\startup_LPC17xx.s

I2C0_IRQHandler 000000C8

Symbol: I2C0_IRQHandler
   Definitions
      At line 398 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 87 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 362 in file RTE\Device\LPC1768\startup_LPC17xx.s

I2C1_IRQHandler 000000C8

Symbol: I2C1_IRQHandler
   Definitions
      At line 399 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 88 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 363 in file RTE\Device\LPC1768\startup_LPC17xx.s

I2C2_IRQHandler 000000C8

Symbol: I2C2_IRQHandler
   Definitions
      At line 400 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 89 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 364 in file RTE\Device\LPC1768\startup_LPC17xx.s

I2S_IRQHandler 000000C8

Symbol: I2S_IRQHandler
   Definitions
      At line 415 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 104 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 379 in file RTE\Device\LPC1768\startup_LPC17xx.s




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Label 00000070

Symbol: Label
   Definitions
      At line 231 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 191 in file RTE\Device\LPC1768\startup_LPC17xx.s
Comment: Label used once
MCPWM_IRQHandler 000000C8

Symbol: MCPWM_IRQHandler
   Definitions
      At line 418 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 107 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 382 in file RTE\Device\LPC1768\startup_LPC17xx.s

MOVETOPRIVILEDGE 000000AC

Symbol: MOVETOPRIVILEDGE
   Definitions
      At line 320 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 316 in file RTE\Device\LPC1768\startup_LPC17xx.s
Comment: MOVETOPRIVILEDGE used once
MemManage_Handler 00000086

Symbol: MemManage_Handler
   Definitions
      At line 266 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 63 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 267 in file RTE\Device\LPC1768\startup_LPC17xx.s

NMI_Handler 00000072

Symbol: NMI_Handler
   Definitions
      At line 238 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 61 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 239 in file RTE\Device\LPC1768\startup_LPC17xx.s

NotEnableDException 00000084

Symbol: NotEnableDException
   Definitions
      At line 258 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 252 in file RTE\Device\LPC1768\startup_LPC17xx.s
Comment: NotEnableDException used once
PLL0_IRQHandler 000000C8

Symbol: PLL0_IRQHandler
   Definitions
      At line 404 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 93 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 368 in file RTE\Device\LPC1768\startup_LPC17xx.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols


PLL1_IRQHandler 000000C8

Symbol: PLL1_IRQHandler
   Definitions
      At line 420 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 109 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 384 in file RTE\Device\LPC1768\startup_LPC17xx.s

PWM1_IRQHandler 000000C8

Symbol: PWM1_IRQHandler
   Definitions
      At line 397 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 86 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 361 in file RTE\Device\LPC1768\startup_LPC17xx.s

PendSV_Handler 000000BE

Symbol: PendSV_Handler
   Definitions
      At line 335 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 73 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 336 in file RTE\Device\LPC1768\startup_LPC17xx.s

QEI_IRQHandler 000000C8

Symbol: QEI_IRQHandler
   Definitions
      At line 419 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 108 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 383 in file RTE\Device\LPC1768\startup_LPC17xx.s

RIT_IRQHandler 000000C8

Symbol: RIT_IRQHandler
   Definitions
      At line 417 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 106 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 381 in file RTE\Device\LPC1768\startup_LPC17xx.s

RTC_IRQHandler 000000C8

Symbol: RTC_IRQHandler
   Definitions
      At line 405 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 94 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 369 in file RTE\Device\LPC1768\startup_LPC17xx.s

Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

      At line 138 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 60 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 139 in file RTE\Device\LPC1768\startup_LPC17xx.s

SPI_IRQHandler 000000C8

Symbol: SPI_IRQHandler
   Definitions
      At line 401 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 90 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 365 in file RTE\Device\LPC1768\startup_LPC17xx.s

SSP0_IRQHandler 000000C8

Symbol: SSP0_IRQHandler
   Definitions
      At line 402 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 91 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 366 in file RTE\Device\LPC1768\startup_LPC17xx.s

SSP1_IRQHandler 000000C8

Symbol: SSP1_IRQHandler
   Definitions
      At line 403 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 92 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 367 in file RTE\Device\LPC1768\startup_LPC17xx.s

STOP 0000006E

Symbol: STOP
   Definitions
      At line 229 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 229 in file RTE\Device\LPC1768\startup_LPC17xx.s
Comment: STOP used once
SVC_Handler 00000094

Symbol: SVC_Handler
   Definitions
      At line 290 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 70 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 291 in file RTE\Device\LPC1768\startup_LPC17xx.s

SysTick_Handler 000000C0

Symbol: SysTick_Handler
   Definitions
      At line 339 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 74 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 340 in file RTE\Device\LPC1768\startup_LPC17xx.s

TIMER0_IRQHandler 000000C8



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols


Symbol: TIMER0_IRQHandler
   Definitions
      At line 389 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 78 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 353 in file RTE\Device\LPC1768\startup_LPC17xx.s

TIMER1_IRQHandler 000000C8

Symbol: TIMER1_IRQHandler
   Definitions
      At line 390 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 79 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 354 in file RTE\Device\LPC1768\startup_LPC17xx.s

TIMER2_IRQHandler 000000C8

Symbol: TIMER2_IRQHandler
   Definitions
      At line 391 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 80 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 355 in file RTE\Device\LPC1768\startup_LPC17xx.s

TIMER3_IRQHandler 000000C8

Symbol: TIMER3_IRQHandler
   Definitions
      At line 392 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 81 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 356 in file RTE\Device\LPC1768\startup_LPC17xx.s

TIMERLOOP 0000006A

Symbol: TIMERLOOP
   Definitions
      At line 221 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 222 in file RTE\Device\LPC1768\startup_LPC17xx.s
Comment: TIMERLOOP used once
UART0_IRQHandler 000000C8

Symbol: UART0_IRQHandler
   Definitions
      At line 393 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 82 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 357 in file RTE\Device\LPC1768\startup_LPC17xx.s

UART1_IRQHandler 000000C8

Symbol: UART1_IRQHandler
   Definitions
      At line 394 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 83 in file RTE\Device\LPC1768\startup_LPC17xx.s



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

      At line 358 in file RTE\Device\LPC1768\startup_LPC17xx.s

UART2_IRQHandler 000000C8

Symbol: UART2_IRQHandler
   Definitions
      At line 395 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 84 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 359 in file RTE\Device\LPC1768\startup_LPC17xx.s

UART3_IRQHandler 000000C8

Symbol: UART3_IRQHandler
   Definitions
      At line 396 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 85 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 360 in file RTE\Device\LPC1768\startup_LPC17xx.s

USBActivity_IRQHandler 000000C8

Symbol: USBActivity_IRQHandler
   Definitions
      At line 421 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 110 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 385 in file RTE\Device\LPC1768\startup_LPC17xx.s

USB_IRQHandler 000000C8

Symbol: USB_IRQHandler
   Definitions
      At line 412 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 101 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 376 in file RTE\Device\LPC1768\startup_LPC17xx.s

UsageFault_Handler 00000092

Symbol: UsageFault_Handler
   Definitions
      At line 286 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 65 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 287 in file RTE\Device\LPC1768\startup_LPC17xx.s

WDT_IRQHandler 000000C8

Symbol: WDT_IRQHandler
   Definitions
      At line 388 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 77 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 352 in file RTE\Device\LPC1768\startup_LPC17xx.s

__user_initial_stackheap 000000CC

Symbol: __user_initial_stackheap



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 444 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 443 in file RTE\Device\LPC1768\startup_LPC17xx.s
Comment: __user_initial_stackheap used once
54 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BusFaultAddressRegister E000ED38

Symbol: BusFaultAddressRegister
   Definitions
      At line 122 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 279 in file RTE\Device\LPC1768\startup_LPC17xx.s
Comment: BusFaultAddressRegister used once
BusFaultStatusRegister E000ED29

Symbol: BusFaultStatusRegister
   Definitions
      At line 121 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 274 in file RTE\Device\LPC1768\startup_LPC17xx.s
Comment: BusFaultStatusRegister used once
Heap_Size 00000000

Symbol: Heap_Size
   Definitions
      At line 42 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 46 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 448 in file RTE\Device\LPC1768\startup_LPC17xx.s

HradFaaultStatusRegister E000ED2C

Symbol: HradFaaultStatusRegister
   Definitions
      At line 119 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 245 in file RTE\Device\LPC1768\startup_LPC17xx.s
Comment: HradFaaultStatusRegister used once
Stack_Size 00000200

Symbol: Stack_Size
   Definitions
      At line 31 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 34 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 447 in file RTE\Device\LPC1768\startup_LPC17xx.s

SysControlAndStatusRegister E000E010

Symbol: SysControlAndStatusRegister
   Definitions
      At line 125 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 198 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 214 in file RTE\Device\LPC1768\startup_LPC17xx.s

SysCurrentValueRegister E000E018

Symbol: SysCurrentValueRegister
   Definitions
      At line 127 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 210 in file RTE\Device\LPC1768\startup_LPC17xx.s
Comment: SysCurrentValueRegister used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

SysReloadValueRegister E000E014

Symbol: SysReloadValueRegister
   Definitions
      At line 126 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 205 in file RTE\Device\LPC1768\startup_LPC17xx.s
Comment: SysReloadValueRegister used once
SystemHandlerControl E000ED24

Symbol: SystemHandlerControl
   Definitions
      At line 120 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      At line 143 in file RTE\Device\LPC1768\startup_LPC17xx.s
      At line 172 in file RTE\Device\LPC1768\startup_LPC17xx.s

9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

__use_two_region_memory 00000000

Symbol: __use_two_region_memory
   Definitions
      At line 442 in file RTE\Device\LPC1768\startup_LPC17xx.s
   Uses
      None
Comment: __use_two_region_memory unused
1 symbol
415 symbols in table
