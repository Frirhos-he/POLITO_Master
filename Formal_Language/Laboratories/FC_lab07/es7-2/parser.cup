import java_cup.runtime.*;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Vector;
import java.util.Iterator;
   

init with {:
    type_table = new HashMap<String,te_node>();
    var_table = new HashMap<String,var_info>();
    type_table.put ("int", te_node.te_make_base(1));
    type_table.put ("float", te_node.te_make_base(2));
    type_table.put ("char", te_node.te_make_base(3));
    type_table.put ("double", te_node.te_make_base(4));

:}

parser code {:
    //Hash table in cui vengono memorizzati tutti i tipi dichiatati nel programma con i relativi nomi
    public static HashMap<String,te_node> type_table;
    //Hash table in cui vengono memorizzati i nomi degli identificatori e dei relativi tipi
    public static HashMap<String,var_info> var_table;


    public class var_info{
    	String name;
    	te_node type;
    }

    //Ricerca e restituisce in type_table il tipo associato al nome name
    public static te_node type_lookup(String name){
	te_node rv = (te_node)type_table.get(name);
	return rv;
    }


    //Aggiunge una variabile in var_table
    int add_var(String name,te_node type)
    {
	var_info vip = new var_info();
	System.out.print("var " + name + ":");
	te_node.te_print(type);
	System.out.print("\n");
	
      vip.name=name;
	vip.type=type;
	if ((var_table.put(name,vip))!=null)
	    return 1;
	return 0;
    }
:};

   
terminal Integer NUM;
terminal String ID;
terminal te_node TYPE;

terminal TIMES, LBS, RBS, PV, CM;


non terminal te_node S, Decl, T, Vlist, V, Ptr, Ary;
non terminal te_node NT0;   

start with S;

 
S ::= 	/* empty */
	| S Decl PV
	| S error PV {: parser.report_error("Errore in dichiarazione",null); :}
;


Decl ::= T Vlist
;

//TIPO BASE: int, float, char, double
T ::= TYPE:a 
	{: 
		//Lo scanner ha già ritornato un oggetto di tipo te_node contenente il tipo base
		RESULT=a; 
	:}
;


NT0 ::={:
	RESULT=((te_node)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value);
:};

Vlist ::= V:v {: RESULT=v; :}
	| Vlist:vl CM NT0 V {: RESULT=vl;	:}
;

//ARRAY, PUNTATORI E IDENTIFICATORI (nome variabile)


V ::=	Ptr ID:i Ary:a 
	{: 
				parser.add_var(i,a); 
				RESULT=(te_node)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).value; 
	:}
;


//PUNTATORE
Ptr ::=	/* empty */ 
	{: 
		//L'informazione di tipo si trova sempre in top e viene passata a ptr. Potra' essere
		//utilizzata nella regola definita subito dopo
		RESULT=(te_node)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top)).value; 
	:}
	| Ptr:p TIMES 
	{:	
		RESULT=te_node.te_make_pointer(p); 
	:}
;

//ARRAY
Ary ::= /* empty */ 
	{: 
		//Viene passata l'informazione di tipo in Ary. Potra' poi essere utilizzata dalla
		//regola dopo definita
		RESULT=(te_node)((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).value; 
	:}
	| Ary:a LBS NUM:n RBS 
	{: 
		RESULT=te_node.te_make_array(n.intValue(),a); 
	:}
;
