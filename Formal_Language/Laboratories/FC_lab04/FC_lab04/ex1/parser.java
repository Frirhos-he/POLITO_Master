
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\006\007\000\002\005\006\000\002\010\005\000" +
    "\002\010\003\000\002\012\005\000\002\012\003\000\002" +
    "\007\005\000\002\007\003\000\002\011\004\000\002\013" +
    "\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\037\000\006\005\ufffd\010\ufffd\001\002\000\006\005" +
    "\010\010\014\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\006\006\035\007\036\001\002\000" +
    "\014\006\ufff4\007\ufff4\011\ufff4\013\034\014\ufff4\001\002" +
    "\000\006\004\030\005\010\001\002\000\010\002\uffff\005" +
    "\uffff\010\uffff\001\002\000\006\002\ufffd\005\ufffd\001\002" +
    "\000\004\012\016\001\002\000\010\002\ufffe\005\ufffe\010" +
    "\ufffe\001\002\000\004\005\010\001\002\000\006\007\ufff8" +
    "\011\ufff8\001\002\000\006\007\022\011\021\001\002\000" +
    "\004\005\010\001\002\000\006\002\ufffa\005\ufffa\001\002" +
    "\000\006\007\ufff9\011\ufff9\001\002\000\006\002\000\005" +
    "\010\001\002\000\006\011\ufff2\014\ufff2\001\002\000\006" +
    "\011\ufff6\014\ufff6\001\002\000\006\011\032\014\031\001" +
    "\002\000\006\011\ufff1\014\ufff1\001\002\000\012\006\ufff5" +
    "\007\ufff5\011\ufff5\014\ufff5\001\002\000\006\004\030\005" +
    "\010\001\002\000\006\011\ufff7\014\ufff7\001\002\000\006" +
    "\004\ufff3\005\ufff3\001\002\000\004\012\037\001\002\000" +
    "\010\002\ufffc\005\ufffc\010\ufffc\001\002\000\004\005\010" +
    "\001\002\000\006\007\041\011\021\001\002\000\010\002" +
    "\ufffb\005\ufffb\010\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\037\000\006\002\004\003\003\001\001\000\014\004" +
    "\011\005\012\006\014\007\006\011\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\024\011\010\012\026\013\025\001\001" +
    "\000\002\001\001\000\004\003\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\016\010\017\011\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\022\011\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\011\006\014\007\006\011\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\024\011\010\013" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\016\010\037\011" +
    "\010\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public int flag = 0;
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= component interrogation component 
            { parser.Tree.reduce(3,"prog",0);
              Object RESULT =null;
		 System.out.println(flag);if(flag == 1)System.out.println("Success");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // component ::= component fact 
            { parser.Tree.reduce(2,"component",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // component ::= component rule 
            { parser.Tree.reduce(2,"component",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // component ::= 
            { parser.Tree.reduce(0,"component",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fact ::= predicate DOT 
            { parser.Tree.reduce(2,"fact",0);
              Object RESULT =null;
		 flag=1;System.out.println("FACT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fact",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // rule ::= predicate CL MINUS setPredicates DOT 
            { parser.Tree.reduce(5,"rule",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rule",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // interrogation ::= QMARK MINUS setPredicates DOT 
            { parser.Tree.reduce(4,"interrogation",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("interrogation",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // setPredicates ::= setPredicates COM predicate 
            { parser.Tree.reduce(3,"setPredicates",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("setPredicates",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // setPredicates ::= predicate 
            { parser.Tree.reduce(1,"setPredicates",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("setPredicates",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // setArguments ::= setArguments COM argument 
            { parser.Tree.reduce(3,"setArguments",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("setArguments",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // setArguments ::= argument 
            { parser.Tree.reduce(1,"setArguments",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("setArguments",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // predicate ::= functor setArguments BP 
            { parser.Tree.reduce(3,"predicate",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // predicate ::= ATOM 
            { parser.Tree.reduce(1,"predicate",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // functor ::= ATOM FP 
            { parser.Tree.reduce(2,"functor",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // argument ::= predicate 
            { parser.Tree.reduce(1,"argument",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // argument ::= VARIABLE 
            { parser.Tree.reduce(1,"argument",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
