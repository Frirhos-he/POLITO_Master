
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\002\010\000\002\003" +
    "\003\000\002\003\003\000\002\004\004\000\002\010\012" +
    "\000\002\010\007\000\002\011\010\000\002\011\024\000" +
    "\002\011\032\000\002\005\013\000\002\005\010\000\002" +
    "\007\002\000\002\007\005\000\002\012\004\000\002\012" +
    "\005\000\002\013\007\000\002\022\005\000\002\022\007" +
    "\000\002\014\002\000\002\015\002\000\002\015\011\000" +
    "\002\020\003\000\002\016\010\000\002\016\010\000\002" +
    "\017\005\000\002\017\007\000\002\021\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\006\005\005\006\004\001\002\000\004\010" +
    "\136\001\002\000\004\010\127\001\002\000\004\004\ufffe" +
    "\001\002\000\004\002\126\001\002\000\006\005\072\006" +
    "\071\001\002\000\004\004\uffff\001\002\000\004\004\013" +
    "\001\002\000\004\013\016\001\002\000\006\004\uffee\013" +
    "\016\001\002\000\004\013\016\001\002\000\004\020\020" +
    "\001\002\000\006\011\023\014\024\001\002\000\004\023" +
    "\021\001\002\000\004\015\022\001\002\000\006\011\ufff0" +
    "\014\ufff0\001\002\000\004\020\027\001\002\000\004\020" +
    "\025\001\002\000\004\010\026\001\002\000\006\004\ufff1" +
    "\013\ufff1\001\002\000\004\023\030\001\002\000\004\015" +
    "\031\001\002\000\006\011\uffef\014\uffef\001\002\000\006" +
    "\004\ufff3\013\ufff3\001\002\000\004\013\016\001\002\000" +
    "\004\004\035\001\002\000\006\002\uffed\023\uffed\001\002" +
    "\000\006\002\000\023\037\001\002\000\004\016\040\001" +
    "\002\000\004\020\042\001\002\000\004\012\043\001\002" +
    "\000\004\012\uffeb\001\002\000\004\020\uffe6\001\002\000" +
    "\004\020\uffe6\001\002\000\006\010\047\011\046\001\002" +
    "\000\004\020\050\001\002\000\006\002\uffec\023\uffec\001" +
    "\002\000\004\013\051\001\002\000\004\020\053\001\002" +
    "\000\006\011\056\014\057\001\002\000\004\021\054\001" +
    "\002\000\004\017\055\001\002\000\006\011\uffe8\014\uffe8" +
    "\001\002\000\004\020\060\001\002\000\006\010\uffe9\011" +
    "\uffe9\001\002\000\004\021\061\001\002\000\004\017\062" +
    "\001\002\000\006\011\uffe7\014\uffe7\001\002\000\004\020" +
    "\064\001\002\000\004\013\065\001\002\000\004\020\053" +
    "\001\002\000\006\011\056\014\067\001\002\000\006\010" +
    "\uffea\011\uffea\001\002\000\006\004\ufff2\013\ufff2\001\002" +
    "\000\004\010\077\001\002\000\004\010\074\001\002\000" +
    "\004\004\ufffd\001\002\000\004\005\075\001\002\000\004" +
    "\010\076\001\002\000\006\005\ufffb\006\ufffb\001\002\000" +
    "\004\006\100\001\002\000\004\010\101\001\002\000\004" +
    "\006\102\001\002\000\004\010\103\001\002\000\006\004" +
    "\ufffa\006\104\001\002\000\004\010\105\001\002\000\004" +
    "\006\106\001\002\000\004\010\107\001\002\000\004\006" +
    "\110\001\002\000\004\010\111\001\002\000\004\006\112" +
    "\001\002\000\004\010\113\001\002\000\004\006\114\001" +
    "\002\000\004\010\115\001\002\000\004\006\116\001\002" +
    "\000\004\010\117\001\002\000\006\004\ufff9\006\120\001" +
    "\002\000\004\010\121\001\002\000\004\006\122\001\002" +
    "\000\004\010\123\001\002\000\004\006\124\001\002\000" +
    "\004\010\125\001\002\000\004\004\ufff8\001\002\000\004" +
    "\002\001\001\002\000\004\005\130\001\002\000\004\010" +
    "\131\001\002\000\004\005\132\001\002\000\004\010\133" +
    "\001\002\000\004\005\134\001\002\000\004\010\135\001" +
    "\002\000\006\005\ufffc\006\ufffc\001\002\000\006\005\ufff5" +
    "\006\ufff5\001\002\000\006\005\141\006\140\001\002\000" +
    "\004\010\143\001\002\000\004\010\142\001\002\000\010" +
    "\004\ufff4\005\ufff4\006\ufff4\001\002\000\010\004\ufff5\005" +
    "\ufff5\006\ufff5\001\002\000\010\004\ufff6\005\141\006\145" +
    "\001\002\000\004\010\146\001\002\000\006\004\ufff5\005" +
    "\ufff5\001\002\000\006\004\ufff7\005\141\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\014\002\006\003\011\004\010\005\005\010" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\013\013\014" +
    "\001\001\000\006\013\032\014\033\001\001\000\004\013" +
    "\031\001\001\000\004\022\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\067\001\001\000\002" +
    "\001\001\000\004\015\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\044\021\043\001\001\000" +
    "\004\021\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\146\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap<String, HashMap<String, Double>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


 
    public HashMap<String, HashMap<String, Double>> table;
 
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
 
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= starter EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // starter ::= header SEP warehouse nt1 SEP prodl 
            { parser.Tree.reduce(6,"starter",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("starter",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= header1 
            { parser.Tree.reduce(1,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= header2 
            { parser.Tree.reduce(1,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header1 ::= ltok1 ltok2 
            { parser.Tree.reduce(2,"header1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ltok1 ::= TOK1 S TOK1 S TOK1 S TOK1 S 
            { parser.Tree.reduce(8,"ltok1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltok1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ltok1 ::= ltok1 TOK1 S TOK1 S 
            { parser.Tree.reduce(5,"ltok1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltok1",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ltok2 ::= TOK2 S TOK2 S TOK2 S 
            { parser.Tree.reduce(6,"ltok2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltok2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ltok2 ::= TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S 
            { parser.Tree.reduce(18,"ltok2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltok2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ltok2 ::= TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S TOK2 S 
            { parser.Tree.reduce(24,"ltok2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ltok2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // header2 ::= TOK2 S nt0 TOK2 S nt0 TOK2 S nt0 
            { parser.Tree.reduce(9,"header2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // header2 ::= TOK2 S nt0 TOK2 S nt0 
            { parser.Tree.reduce(6,"header2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // nt0 ::= 
            { parser.Tree.reduce(0,"nt0",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt0",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // nt0 ::= nt0 TOK1 S 
            { parser.Tree.reduce(3,"nt0",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt0",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // warehouse ::= mat mat 
            { parser.Tree.reduce(2,"warehouse",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("warehouse",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // warehouse ::= warehouse mat mat 
            { parser.Tree.reduce(3,"warehouse",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("warehouse",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // mat ::= BO mlist BC QSTRING S 
            { parser.Tree.reduce(5,"mat",0);
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		HashMap<String,Double> m = (HashMap<String,Double>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

    parser.table.put(n,m);

    String maxName = "", minName = "";
    Double max = 0.0, min = Double.MAX_VALUE;

        for(String s : m.keySet()){
            Double val = m.get(s);
            if(val > max){
                max =val;
                maxName = s;
            }
            if (val < min){
                min = val;
                minName = s;
            }
        }

    System.out.println(n + ": less: " + minName + ", more: " + maxName);


              CUP$parser$result = parser.getSymbolFactory().newSymbol("mat",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // mlist ::= QSTRING PRICE EKG 
            { parser.Tree.reduce(3,"mlist",0);
              HashMap<String,Double> RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double v = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 HashMap<String,Double> table = new HashMap<String, Double>(); table.put(k,v); RESULT=table;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mlist",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // mlist ::= mlist CM QSTRING PRICE EKG 
            { parser.Tree.reduce(5,"mlist",0);
              HashMap<String,Double> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap<String,Double> m = (HashMap<String,Double>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double v = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 m.put(k,v); RESULT=m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mlist",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // nt1 ::= 
            { parser.Tree.reduce(0,"nt1",0);
              Object RESULT =null;
		System.out.println("----");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // prodl ::= 
            { parser.Tree.reduce(0,"prodl",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prodl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // prodl ::= prodl PRICE EW pname COL eleml S 
            { parser.Tree.reduce(7,"prodl",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prodl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // pname ::= QSTRING 
            { parser.Tree.reduce(1,"pname",0);
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pname",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // eleml ::= nt2 nt2 QSTRING BO clist BC 
            { parser.Tree.reduce(6,"eleml",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eleml",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // eleml ::= eleml CM QSTRING BO clist BC 
            { parser.Tree.reduce(6,"eleml",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eleml",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // clist ::= QSTRING UINT KGW 
            { parser.Tree.reduce(3,"clist",0);
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int qtyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qtyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer qty = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 HashMap<String,Double> table = parser.table.get((String)parser.stack(-4)); Double price = table.get(name); Double res = price*qty+(Double)parser.stack(-10);
                                       System.out.println(name + " " + String.format("%.2f", res) + " euro"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clist",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // clist ::= clist CM QSTRING UINT KGW 
            { parser.Tree.reduce(5,"clist",0);
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int qtyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qtyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer qty = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 HashMap<String,Double> table = parser.table.get((String)parser.stack(-6)); Double price = table.get(name); Double res = price*qty+(Double)parser.stack(-12);
                                                 System.out.println(name + " " + String.format("%.2f", res) + " euro"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clist",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nt2 ::= 
            { parser.Tree.reduce(0,"nt2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt2",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
