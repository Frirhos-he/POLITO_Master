// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: scanner.jflex

import java_cup.runtime.*;
 

@SuppressWarnings("fallthrough")
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\0"+
    "\1\5\1\0\1\6\1\7\2\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\4\25\1\26\1\27\1\30\5\0\4\31"+
    "\1\32\1\31\10\0\1\33\2\0\1\34\2\0\1\35"+
    "\5\0\1\36\1\0\1\37\3\0\6\31\1\40\3\0"+
    "\1\41\31\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\5\1\1\3\1\4\3\5\1\6"+
    "\1\7\1\1\1\10\1\11\1\1\1\0\1\12\3\0"+
    "\2\13\1\5\1\0\1\14\4\0\1\15\1\5\1\0"+
    "\1\16\2\0\1\13\2\5\22\0\1\17\101\0\1\20"+
    "\13\0\1\20\16\0\1\20\31\0\1\20\7\0\1\20"+
    "\22\0\1\21\2\0\1\20\7\0\2\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\42\0\104\0\146\0\210\0\252\0\314"+
    "\0\356\0\42\0\u0110\0\u0132\0\u0154\0\u0176\0\42\0\42"+
    "\0\u0198\0\42\0\42\0\u01ba\0\146\0\42\0\u01dc\0\u01fe"+
    "\0\u0220\0\u0242\0\u0110\0\u0264\0\u0286\0\42\0\u02a8\0\u02ca"+
    "\0\u02ec\0\u030e\0\u0330\0\u0352\0\u0374\0\u01dc\0\u0396\0\u03b8"+
    "\0\u0330\0\u03da\0\u03fc\0\u041e\0\u0440\0\u0462\0\u0484\0\u04a6"+
    "\0\u04c8\0\u04ea\0\u050c\0\u052e\0\u0550\0\u0572\0\u0594\0\u05b6"+
    "\0\u05d8\0\u05fa\0\u061c\0\u063e\0\u0660\0\42\0\u0682\0\u06a4"+
    "\0\u06c6\0\u06e8\0\u070a\0\u072c\0\u074e\0\u0770\0\u0792\0\u07b4"+
    "\0\u07d6\0\u07f8\0\u081a\0\u083c\0\u085e\0\u0880\0\u08a2\0\u08c4"+
    "\0\u08e6\0\u0908\0\u092a\0\u094c\0\u096e\0\u0990\0\u09b2\0\u09d4"+
    "\0\u09f6\0\u0a18\0\u0a3a\0\u0a5c\0\u0a7e\0\u0aa0\0\u0ac2\0\u0ae4"+
    "\0\u0b06\0\u0b28\0\u0b4a\0\u0b6c\0\u0b8e\0\u0bb0\0\u0bd2\0\u0bf4"+
    "\0\u0c16\0\u0c38\0\u0c5a\0\u0c7c\0\u0c9e\0\u0cc0\0\u0ce2\0\u0d04"+
    "\0\u0d26\0\u0d48\0\u0d6a\0\u0d8c\0\u0dae\0\u0dd0\0\u0df2\0\u0e14"+
    "\0\u0e36\0\u0e58\0\u0e7a\0\u0e9c\0\u0ebe\0\u0ee0\0\u0f02\0\u0f24"+
    "\0\u0f46\0\u0f68\0\u0f8a\0\u0fac\0\u0fce\0\u0ff0\0\u1012\0\u1034"+
    "\0\u1056\0\u1078\0\u109a\0\u10bc\0\u10de\0\u1100\0\u1122\0\u1144"+
    "\0\u1166\0\u1188\0\u11aa\0\u11cc\0\u11ee\0\u1210\0\u1232\0\u1254"+
    "\0\u1276\0\u1298\0\u12ba\0\u12dc\0\u12fe\0\u1320\0\u1342\0\u1364"+
    "\0\u1386\0\u13a8\0\u13ca\0\u13ec\0\u140e\0\u1430\0\u1452\0\u1474"+
    "\0\u1496\0\u14b8\0\u14da\0\u14fc\0\u151e\0\u1540\0\u1562\0\u1584"+
    "\0\u15a6\0\u15c8\0\u15ea\0\u160c\0\u162e\0\u1650\0\u1672\0\u1694"+
    "\0\u16b6\0\u16d8\0\u16fa\0\u171c\0\u173e\0\u1760\0\u1782\0\u17a4"+
    "\0\u17c6\0\u17e8\0\u180a\0\u182c\0\u184e\0\u1870\0\u1892\0\u18b4"+
    "\0\u18d6\0\u18f8\0\u191a\0\u193c\0\u195e\0\u1980\0\u19a2\0\u19c4"+
    "\0\u19e6\0\u1a08\0\42\0\u1a2a\0\u1a4c\0\u1a6e\0\u1a90\0\u1ab2"+
    "\0\u1ad4\0\u1af6\0\u1af6\0\42";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\2\1\11\1\2\1\12\1\2\1\13\1\2\1\14"+
    "\1\15\1\16\4\15\1\17\1\20\1\2\1\21\3\2"+
    "\1\22\1\23\1\2\1\24\44\0\1\3\37\0\5\25"+
    "\1\26\34\25\6\0\1\27\42\0\1\30\2\0\1\30"+
    "\41\0\1\31\36\0\1\30\52\0\7\32\31\0\1\33"+
    "\41\0\1\33\1\0\7\15\31\0\1\33\1\0\1\34"+
    "\6\15\50\0\1\35\44\0\1\36\7\0\1\37\42\0"+
    "\1\40\2\0\1\41\44\0\1\42\44\0\7\43\31\0"+
    "\1\33\1\0\2\15\1\44\4\15\47\0\1\45\13\0"+
    "\1\46\42\0\1\47\2\0\1\47\36\0\1\47\32\0"+
    "\15\42\1\50\24\42\20\0\7\51\31\0\1\33\1\0"+
    "\2\15\1\52\1\53\3\15\46\0\1\54\15\0\1\55"+
    "\2\0\1\56\27\0\12\42\1\57\2\42\1\50\24\42"+
    "\16\0\1\33\1\60\7\15\31\0\1\33\1\61\7\15"+
    "\32\0\1\62\31\0\1\63\2\0\1\63\36\0\1\63"+
    "\32\0\11\42\1\3\3\42\1\50\24\42\21\0\1\64"+
    "\40\0\1\65\62\0\1\66\7\0\1\67\2\0\1\70"+
    "\50\0\1\71\1\72\40\0\1\73\1\74\1\75\56\0"+
    "\1\76\10\0\1\77\2\0\1\77\36\0\1\77\51\0"+
    "\1\100\41\0\1\101\41\0\1\102\41\0\1\103\41\0"+
    "\1\104\31\0\1\105\2\0\1\106\50\0\1\107\1\110"+
    "\1\111\36\0\1\110\1\112\1\110\1\113\36\0\3\110"+
    "\1\113\36\0\1\110\1\114\1\115\37\0\3\110\1\111"+
    "\25\0\1\116\2\0\1\116\36\0\1\116\57\0\2\117"+
    "\33\0\7\117\33\0\1\117\41\0\3\117\1\0\3\117"+
    "\33\0\2\117\40\0\4\117\1\0\2\117\33\0\6\117"+
    "\23\0\1\120\2\0\1\121\35\0\2\122\41\0\1\123"+
    "\2\0\1\123\36\0\1\123\54\0\1\124\26\0\1\125"+
    "\2\0\1\126\5\0\7\127\2\0\2\127\27\0\1\130"+
    "\30\0\1\131\2\0\1\131\36\0\1\131\52\0\7\132"+
    "\2\0\2\132\31\0\1\133\26\0\1\134\2\0\1\135"+
    "\5\0\7\127\2\0\2\127\22\0\1\136\4\0\7\137"+
    "\2\0\2\137\31\0\1\140\1\141\25\0\1\142\2\0"+
    "\1\142\36\0\1\142\52\0\7\143\2\0\2\143\22\0"+
    "\1\136\4\0\7\144\2\0\2\144\26\0\1\145\41\0"+
    "\1\146\31\0\1\147\2\0\1\150\5\0\7\127\2\0"+
    "\2\127\27\0\7\151\2\0\2\151\27\0\7\152\2\0"+
    "\2\152\30\0\1\153\40\0\1\154\30\0\1\155\2\0"+
    "\1\155\36\0\1\155\45\0\1\156\4\0\7\157\2\0"+
    "\2\157\27\0\7\160\2\0\2\160\30\0\1\161\1\162"+
    "\40\0\1\163\1\164\1\165\25\0\1\166\2\0\1\167"+
    "\5\0\7\127\2\0\2\127\27\0\7\170\2\0\2\170"+
    "\22\0\1\156\4\0\7\171\2\0\2\171\22\0\1\136"+
    "\45\0\1\172\41\0\1\173\41\0\1\174\41\0\1\175"+
    "\41\0\1\176\31\0\1\177\2\0\1\177\36\0\1\177"+
    "\52\0\7\200\2\0\2\200\27\0\7\201\2\0\2\201"+
    "\30\0\1\202\1\203\1\204\36\0\1\203\1\205\1\203"+
    "\1\206\36\0\3\203\1\206\36\0\1\203\1\207\1\210"+
    "\37\0\3\203\1\204\25\0\1\211\2\0\1\212\5\0"+
    "\7\127\2\0\2\127\22\0\1\213\4\0\7\214\2\0"+
    "\2\214\27\0\7\215\2\0\2\215\34\0\2\216\33\0"+
    "\7\216\33\0\1\216\41\0\3\216\1\0\3\216\33\0"+
    "\2\216\40\0\4\216\1\0\2\216\33\0\6\216\23\0"+
    "\1\217\2\0\1\217\36\0\1\217\52\0\7\220\2\0"+
    "\2\220\22\0\1\213\4\0\7\221\2\0\2\221\22\0"+
    "\1\156\34\0\2\222\41\0\1\223\2\0\1\224\5\0"+
    "\7\127\2\0\2\127\27\0\7\225\2\0\2\225\27\0"+
    "\7\226\2\0\2\226\31\0\1\227\26\0\1\230\2\0"+
    "\1\230\36\0\1\230\45\0\1\231\4\0\7\232\2\0"+
    "\2\232\27\0\7\233\2\0\2\233\27\0\1\234\30\0"+
    "\1\235\2\0\1\236\5\0\7\127\2\0\2\127\27\0"+
    "\7\237\2\0\2\237\22\0\1\231\4\0\7\240\2\0"+
    "\2\240\22\0\1\213\50\0\1\241\26\0\1\242\2\0"+
    "\1\242\36\0\1\242\52\0\7\243\2\0\2\243\27\0"+
    "\7\244\2\0\2\244\31\0\1\245\1\246\25\0\1\247"+
    "\2\0\1\250\5\0\7\127\2\0\2\127\22\0\1\251"+
    "\4\0\7\252\2\0\2\252\27\0\7\253\2\0\2\253"+
    "\26\0\1\254\41\0\1\255\31\0\1\256\2\0\1\256"+
    "\36\0\1\256\52\0\7\257\2\0\2\257\22\0\1\251"+
    "\4\0\7\260\2\0\2\260\22\0\1\231\47\0\1\261"+
    "\40\0\1\262\30\0\1\263\2\0\1\264\5\0\7\127"+
    "\2\0\2\127\27\0\7\265\2\0\2\265\27\0\7\266"+
    "\2\0\2\266\30\0\1\267\1\270\40\0\1\271\1\272"+
    "\1\273\25\0\1\274\2\0\1\274\36\0\1\274\52\0"+
    "\7\275\2\0\2\275\27\0\7\276\2\0\2\276\26\0"+
    "\1\277\41\0\1\300\41\0\1\301\41\0\1\302\41\0"+
    "\1\303\31\0\1\304\2\0\1\305\5\0\7\127\2\0"+
    "\2\127\27\0\7\306\2\0\2\306\22\0\1\251\47\0"+
    "\1\307\1\310\1\311\36\0\1\310\1\312\1\310\1\313"+
    "\36\0\3\310\1\313\36\0\1\310\1\314\1\315\37\0"+
    "\3\310\1\311\25\0\1\316\2\0\1\316\36\0\1\316"+
    "\52\0\7\317\2\0\2\317\34\0\2\320\33\0\7\320"+
    "\33\0\1\320\41\0\3\320\1\0\3\320\33\0\2\320"+
    "\40\0\4\320\1\0\2\320\33\0\6\320\23\0\1\321"+
    "\2\0\1\322\5\0\7\127\2\0\2\127\27\0\7\323"+
    "\2\0\2\323\24\0\1\324\33\0\1\325\2\0\1\325"+
    "\36\0\1\325\53\0\1\326\40\0\7\127\2\0\2\127"+
    "\27\0\1\327\1\330\40\0\1\330\1\331\40\0\2\332"+
    "\40\0\1\332\1\333\40\0\2\334\20\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6936];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\6\1\1\11\4\1\2\11\1\1\2\11"+
    "\1\1\1\0\1\11\3\0\3\1\1\0\1\11\4\0"+
    "\2\1\1\0\1\1\2\0\3\1\22\0\1\11\101\0"+
    "\1\1\13\0\1\1\16\0\1\1\31\0\1\1\7\0"+
    "\1\1\22\0\1\1\2\0\1\11\7\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	private Symbol sym(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
 
	private Symbol sym(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}

	//true if debug printing
	private boolean test = false;
 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Scanner Error: " + yytext());
            }
          // fall through
          case 18: break;
          case 2:
            { if(test)System.out.print(yytext());
            }
          // fall through
          case 19: break;
          case 3:
            { if(test)System.out.print(yytext());return sym(sym.CM);
            }
          // fall through
          case 20: break;
          case 4:
            { if(test)System.out.print(yytext());return sym(sym.DOT);
            }
          // fall through
          case 21: break;
          case 5:
            { if(test)System.out.print(yytext());return sym(sym.UINT, Integer.parseInt(yytext()));
            }
          // fall through
          case 22: break;
          case 6:
            { if(test)System.out.print(yytext());return sym(sym.COL);
            }
          // fall through
          case 23: break;
          case 7:
            { if(test)System.out.print(yytext());return sym(sym.S);
            }
          // fall through
          case 24: break;
          case 8:
            { if(test)System.out.print(yytext());return sym(sym.SO);
            }
          // fall through
          case 25: break;
          case 9:
            { if(test)System.out.print(yytext());return sym(sym.SC);
            }
          // fall through
          case 26: break;
          case 10:
            { if(test)System.out.print(yytext());return sym(sym.QSTRING, new String(yytext()));
            }
          // fall through
          case 27: break;
          case 11:
            { if(test)System.out.print(yytext()); return sym(sym.REAL,  Double.parseDouble(yytext()));
            }
          // fall through
          case 28: break;
          case 12:
            { if(test)System.out.print(yytext());return sym(sym.KW);
            }
          // fall through
          case 29: break;
          case 13:
            { if(test)System.out.print(yytext()); return sym(sym.PRICE,  Double.parseDouble(yytext()));
            }
          // fall through
          case 30: break;
          case 14:
            { if(test)System.out.print(yytext()); return sym(sym.SEP);
            }
          // fall through
          case 31: break;
          case 15:
            { if(test)System.out.print(yytext());return sym(sym.KGW);
            }
          // fall through
          case 32: break;
          case 16:
            { if(test)System.out.print(yytext());return sym(sym.TOK1, new String(yytext()));
            }
          // fall through
          case 33: break;
          case 17:
            { if(test)System.out.print(yytext());return sym(sym.TOK2, new String(yytext()));
            }
          // fall through
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
