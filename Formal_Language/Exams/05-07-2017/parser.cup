import java_cup.runtime.*;
import java.util.*;
import java.io.*;
 
/*WATCH OUT: THE HASHTABLE CONTENT DEPENDS ON THE EXERCISE!*/
init with {:
    table = new HashMap<String, HashMap<String, Integer>>();
:};
 
parser code 	{:
 
    public HashMap<String, HashMap<String, Integer>> table;
 
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
 
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }

:};


/*TERMINAL SYMBOLS ARE WRITTEN USING UPPERCASE LETTERS*/
terminal SEP, TOK1, TOK2, TOK3, S, CM, COL;
//terminal PLUS, MINUS, STAR, DIV, UMINUS, RO, RC;
 terminal AND, OR, NOT, UMINUS, RO, RC, EQEQ;
//terminal DATE, HOUR, AMPM, IP, EXP, EMAIL, FILE; 
terminal String QSTRING, VARIABLE;
terminal Integer UINT;
terminal Double REAL, PRICE;
terminal Integer SINT;
terminal MINUS, SET, POSITION, FUEL, DECLARE;
terminal BO, BC, EQ;
terminal QMARK;
terminal ELSE;


non terminal starter, header;
non terminal rep_tok1tok2;
non terminal car_section, command_list, command, declare, if;
non terminal HashMap<String, Integer> attribute_list;


// non terminal header1, header2, header3, nt0;

/*Precedences and associativities
  lower precedences*/
// precedence left PLUS, MINUS;
// precedence left STAR, DIV;
// precedence left UMINUS;
/*higher precedences*/

/*Boolean precedences*/
 precedence left OR;
 precedence left AND;
 precedence left UMINUS;



start with starter;

starter ::= header SEP car_section;
header::= rep_tok1tok2 TOK3 S rep_tok1tok2 TOK3 S rep_tok1tok2 TOK3 S rep_tok1tok2 | rep_tok1tok2 TOK3 S rep_tok1tok2 TOK3 S rep_tok1tok2 |rep_tok1tok2 TOK3 S rep_tok1tok2 | rep_tok1tok2 ;
rep_tok1tok2 ::=  rep_tok1tok2 TOK1 S | rep_tok1tok2 TOK2 S | ;

car_section ::= SET POSITION SINT CM SINT MINUS FUEL SINT S command_list | SET POSITION FUEL SINT MINUS SINT CM SINT S command_list | SET POSITION SINT CM SINT S command_list
                 | SET POSITION FUEL SINT S command_list | SET POSITION MINUS S command_list ;

command_list ::= command_list command command | command command command command ; 
command::= declare | if;
declare ::= DECLARE BO attribute_list:y BC VARIABLE:x S{:
        parser.table.put(x,y);

:};
attribute_list ::= attribute_list:y VARIABLE:x EQ SINT:i S{:
            y.put(x,i);
            RESULT = y;

:} | VARIABLE:x EQ SINT:i S {:
            HashMap<String, Integer> tab = new HashMap<String,Integer>();
            tab.put(x,i);
            RESULT = tab;
:};
if::= QMARK bexpr BO mv_list BC ELSE BO mv_list BC;

// boolean expressions
 bexpr ::= bexpr:a OR bexpr:b {: RESULT = a || b; :} |
           bexpr:a AND bexpr:b  {: RESULT = a && b; :} |
           RO bexpr:a RC {: RESULT = a; :} |
           NOT bexpr:a {: RESULT = !a; :} %prec UMINUS |
           VARIABLE DOT VARIABLE:a {: RESULT = true; :} ;
mv_list ::= ;
/*At the beginning to test it */
// header ::= TOK1 S;



/*1 token repeated N times, the others anywhere   */
// header ::= header1 | header2 | header3;

// header1 ::= header2 TOK3 S nt0;
// header2 ::= header3 TOK3 S nt0 TOK3 S nt0;
// header3 ::= nt0;
//nt0 ::= | nt0 TOK1 S | nt0 TOK2 S;




/*One token once, the other anywhere and at least twice*/
// header ::= TOK2 S TOK1 S TOK2 S | nt0 TOK1 S TOK2 S | TOK2 S TOK1 S nt0 | nt0 TOK1 S nt0 | nt0 TOK1 S | TOK1 S nt0;
// nt0 ::=  TOK2 S TOK2 S | nt0 TOK2 S ;



/*TOK1 twice, TOK2 once, TOK3 0..*, order not fixed*/ 
// header ::= nt0 TOK1 S nt0 TOK2 S nt0 TOK1 S nt0| nt0 TOK1 S nt0 TOK1 S nt0 TOK2 S nt0 | nt0 TOK2 S nt0 TOK1 S nt0 TOK1 S nt0;
// nt0 ::= | nt0 TOK3 S;








// math expressions
// expr ::= expr:a PLUS expr:b {: RESULT = a + b; :} |
//          expr:a MINUS expr:b {: RESULT = a - b; :} |
//          expr:a STAR expr:b  {: RESULT = a * b; :} |
//          expr:a DIV expr:b {: RESULT = a / b; :} |
//          RO expr:a RC {: RESULT = a; :} |
//          MINUS expr:a {: RESULT = -a; :} %prec UMINUS |
//          REAL:a {: RESULT = a; :};

// boolean expressions
// bexpr ::= bexpr:a OR bexpr:b {: RESULT = a || b; :} |
//           bexpr:a AND bexpr:b  {: RESULT = a && b; :} |
//           RO bexpr:a RC {: RESULT = a; :} |
//           NOT bexpr:a {: RESULT = !a; :} %prec UMINUS |
//           T:a {: RESULT = true; :} |
//           F:a {: RESULT = false; :}|

//scan the hashmap to find minimum/maximum
// String maxName = "", minName = "";
// Double max = 0.0, min = Double.MAX_VALUE;

//     for(HashMap<String, Double> hm: parser.table.values()){
//     for(String s : hm.keySet()){
//         Double val = hm.get(s);
//         if(val > max){
//             max = val;
//             maxName = s;
//         }
//         if (val < min){
//             min = val;
//             minName = s;
//         }
//     }
// }  

//     System.out.println("less expensive: " + minName + " " + String.format("%.2f", min) + " EURO/kg");
//     System.out.println("More expensive: " + maxName + " " + String.format("%.2f", max) + " EURO/kg");
//     System.out.println("----");
