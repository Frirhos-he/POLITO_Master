
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\002\005\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\005\006" +
    "\000\002\006\011\000\002\007\003\000\002\010\002\000" +
    "\002\010\005\000\002\011\004\000\002\012\011\000\002" +
    "\012\011\000\002\012\010\000\002\012\010\000\002\012" +
    "\007\000\002\016\002\000\002\023\002\000\002\014\005" +
    "\000\002\015\005\000\002\017\003\000\002\017\003\000" +
    "\002\013\006\000\002\013\005\000\002\003\004\000\002" +
    "\003\004\000\002\022\005\000\002\026\003\000\002\026" +
    "\003\000\002\021\007\000\002\020\007\000\002\020\010" +
    "\000\002\024\005\000\002\024\005\000\002\024\006\000" +
    "\002\024\003\000\002\025\003\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\010\004\ufff9\005\ufff9\006\ufff9\001\002\000" +
    "\006\004\ufffd\006\134\001\002\000\010\004\ufffa\005\132" +
    "\006\ufffa\001\002\000\006\004\ufffe\006\127\001\002\000" +
    "\004\002\126\001\002\000\004\004\uffff\001\002\000\004" +
    "\004\012\001\002\000\004\013\ufff1\001\002\000\004\002" +
    "\000\001\002\000\006\020\067\021\073\001\002\000\004" +
    "\013\016\001\002\000\010\014\017\016\024\027\021\001" +
    "\002\000\006\035\026\040\025\001\002\000\004\027\061" +
    "\001\002\000\010\010\ufff0\014\017\016\024\001\002\000" +
    "\004\027\046\001\002\000\004\027\043\001\002\000\006" +
    "\035\026\040\025\001\002\000\024\010\uffde\011\uffde\015" +
    "\uffde\017\uffde\024\uffde\025\uffde\026\uffde\030\uffde\034\uffde" +
    "\001\002\000\004\033\035\001\002\000\010\017\032\026" +
    "\031\030\030\001\002\000\006\035\026\040\025\001\002" +
    "\000\006\035\026\040\025\001\002\000\006\010\uffee\027" +
    "\uffee\001\002\000\024\010\uffe1\011\uffe1\015\uffe1\017\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\030\030\034\uffe1\001\002\000" +
    "\024\010\uffe0\011\uffe0\015\uffe0\017\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\030\uffe0\034\uffe0\001\002\000\006\035\026\040" +
    "\025\001\002\000\006\011\040\034\041\001\002\000\012" +
    "\011\uffdd\026\031\030\030\034\uffdd\001\002\000\006\035" +
    "\026\040\025\001\002\000\024\010\uffdf\011\uffdf\015\uffdf" +
    "\017\uffdf\024\uffdf\025\uffdf\026\uffdf\030\uffdf\034\uffdf\001" +
    "\002\000\012\011\uffdc\026\031\030\030\034\uffdc\001\002" +
    "\000\004\010\ufff0\001\002\000\004\010\045\001\002\000" +
    "\006\020\ufff4\021\ufff4\001\002\000\004\014\017\001\002" +
    "\000\004\010\ufff0\001\002\000\004\010\051\001\002\000" +
    "\006\020\ufff5\021\ufff5\001\002\000\004\010\uffed\001\002" +
    "\000\004\010\060\001\002\000\004\010\ufff0\001\002\000" +
    "\004\010\uffec\001\002\000\004\010\057\001\002\000\006" +
    "\020\ufff3\021\ufff3\001\002\000\006\020\ufff2\021\ufff2\001" +
    "\002\000\004\016\024\001\002\000\004\010\ufff0\001\002" +
    "\000\004\010\064\001\002\000\006\020\ufff6\021\ufff6\001" +
    "\002\000\010\015\066\026\031\030\030\001\002\000\006" +
    "\010\uffef\027\uffef\001\002\000\006\014\077\016\101\001" +
    "\002\000\004\010\123\001\002\000\004\010\122\001\002" +
    "\000\006\020\067\021\073\001\002\000\006\014\077\016" +
    "\101\001\002\000\010\002\ufff7\020\067\021\073\001\002" +
    "\000\006\020\067\021\073\001\002\000\010\002\uffea\020" +
    "\uffea\021\uffea\001\002\000\010\022\uffe6\035\uffe6\040\uffe6" +
    "\001\002\000\004\022\102\001\002\000\010\022\uffe5\035" +
    "\uffe5\040\uffe5\001\002\000\006\035\026\040\025\001\002" +
    "\000\010\023\111\035\026\040\025\001\002\000\010\024" +
    "\105\026\031\030\030\001\002\000\006\035\026\040\025" +
    "\001\002\000\010\025\107\026\031\030\030\001\002\000" +
    "\004\010\110\001\002\000\010\023\uffe3\035\uffe3\040\uffe3" +
    "\001\002\000\004\010\uffe4\001\002\000\010\024\113\026" +
    "\031\030\030\001\002\000\006\035\026\040\025\001\002" +
    "\000\010\025\115\026\031\030\030\001\002\000\004\010" +
    "\116\001\002\000\010\023\uffe2\035\uffe2\040\uffe2\001\002" +
    "\000\006\020\067\021\073\001\002\000\006\020\067\021" +
    "\073\001\002\000\010\002\uffeb\020\uffeb\021\uffeb\001\002" +
    "\000\010\002\uffe9\020\uffe9\021\uffe9\001\002\000\010\002" +
    "\uffe8\020\uffe8\021\uffe8\001\002\000\006\035\026\040\025" +
    "\001\002\000\010\010\uffe7\026\031\030\030\001\002\000" +
    "\004\002\001\001\002\000\004\010\130\001\002\000\006" +
    "\004\ufff9\005\ufff9\001\002\000\006\004\ufffc\005\132\001" +
    "\002\000\004\010\133\001\002\000\010\004\ufff8\005\ufff8" +
    "\006\ufff8\001\002\000\004\010\135\001\002\000\006\005" +
    "\ufff9\006\ufff9\001\002\000\006\005\132\006\137\001\002" +
    "\000\004\010\140\001\002\000\010\004\ufff9\005\ufff9\006" +
    "\ufff9\001\002\000\010\004\ufffb\005\132\006\ufffb\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\016\002\006\004\010\005\007\006\005\007" +
    "\003\010\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\012\012\013\016\014\001\001" +
    "\000\002\001\001\000\012\003\071\013\073\021\067\022" +
    "\070\001\001\000\002\001\001\000\010\014\017\015\021" +
    "\017\022\001\001\000\004\024\064\001\001\000\002\001" +
    "\001\000\012\014\051\015\054\017\053\023\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\033\001\001\000\004\024\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\036\025\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\046\001\001\000\004\023\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\061\001\001\000\004\023\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\116\021\067\022\070\001" +
    "\001\000\004\026\077\001\001\000\010\003\074\021\067" +
    "\022\070\001\001\000\010\003\075\021\067\022\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\102\024\103\001\001\000" +
    "\004\024\111\001\001\000\002\001\001\000\004\024\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\117\021\067\022\070\001\001\000\010" +
    "\003\120\021\067\022\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\140" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap<String, Double>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


 
    public HashMap<String, Double> table;
 
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
 
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= starter EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // starter ::= header SEP runcmd 
            { parser.Tree.reduce(3,"starter",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("starter",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= header1 
            { parser.Tree.reduce(1,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= header2 
            { parser.Tree.reduce(1,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= header3 
            { parser.Tree.reduce(1,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header1 ::= header2 TOK2 S nt0 
            { parser.Tree.reduce(4,"header1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header2 ::= header3 TOK2 S nt0 TOK2 S nt0 
            { parser.Tree.reduce(7,"header2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header3 ::= nt0 
            { parser.Tree.reduce(1,"header3",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header3",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nt0 ::= 
            { parser.Tree.reduce(0,"nt0",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt0",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // nt0 ::= nt0 TOK1 S 
            { parser.Tree.reduce(3,"nt0",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt0",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // runcmd ::= startcmd coml 
            { parser.Tree.reduce(2,"runcmd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("runcmd",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // startcmd ::= nt1 SW bat MINUS fl nt2 S 
            { parser.Tree.reduce(7,"startcmd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("startcmd",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // startcmd ::= nt1 SW fl MINUS bat nt2 S 
            { parser.Tree.reduce(7,"startcmd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("startcmd",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // startcmd ::= nt1 SW cmd MINUS nt2 S 
            { parser.Tree.reduce(6,"startcmd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("startcmd",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // startcmd ::= nt1 SW MINUS cmd nt2 S 
            { parser.Tree.reduce(6,"startcmd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("startcmd",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // startcmd ::= nt1 SW MINUS nt2 S 
            { parser.Tree.reduce(5,"startcmd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("startcmd",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // nt1 ::= 
            { parser.Tree.reduce(0,"nt1",0);
              Object RESULT =null;
		 parser.table.put("battery",100.0);parser.table.put("fuel",100.0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // nt2 ::= 
            { parser.Tree.reduce(0,"nt2",0);
              Object RESULT =null;
		 System.out.println("battery=" + (Double)parser.table.get("battery") + " fuel=" + (Double)parser.table.get("fuel"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bat ::= BW expr KW 
            { parser.Tree.reduce(3,"bat",0);
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.table.put("battery",e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bat",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fl ::= FW expr LW 
            { parser.Tree.reduce(3,"fl",0);
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.table.put("fuel",e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cmd ::= bat 
            { parser.Tree.reduce(1,"cmd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cmd ::= fl 
            { parser.Tree.reduce(1,"cmd",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // coml ::= comm comm comm comm 
            { parser.Tree.reduce(4,"coml",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("coml",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // coml ::= coml comm comm 
            { parser.Tree.reduce(3,"coml",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("coml",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comm ::= mod S 
            { parser.Tree.reduce(2,"comm",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comm",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comm ::= use S 
            { parser.Tree.reduce(2,"comm",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comm",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // mod ::= MW ptype expr 
            { parser.Tree.reduce(3,"mod",0);
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double v = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Double value=(Double)parser.table.get(k); value+=v; parser.table.put(k,value); System.out.println("battery=" + (Double)parser.table.get("battery") + " fuel=" + (Double)parser.table.get("fuel")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mod",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ptype ::= BW 
            { parser.Tree.reduce(1,"ptype",0);
              String RESULT =null;
		 RESULT = new String("battery"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ptype",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ptype ::= FW 
            { parser.Tree.reduce(1,"ptype",0);
              String RESULT =null;
		 RESULT = new String("fuel"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ptype",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // use ::= UW ptype DW consl DONE 
            { parser.Tree.reduce(5,"use",0);
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("use",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // consl ::= expr KM expr UKM S 
            { parser.Tree.reduce(5,"consl",0);
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Double c = a*b; Double value = (Double)parser.table.get((String)parser.stack(-6)); parser.table.put((String)parser.stack(-6),value-c); System.out.println("battery=" + (Double)parser.table.get("battery") + " fuel=" + (Double)parser.table.get("fuel"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("consl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // consl ::= consl expr KM expr UKM S 
            { parser.Tree.reduce(6,"consl",0);
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Double c = a*b; Double value = (Double)parser.table.get((String)parser.stack(-7)); parser.table.put((String)parser.stack(-7),value-c); System.out.println("battery=" + (Double)parser.table.get("battery") + " fuel=" + (Double)parser.table.get("fuel"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("consl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr PLUS expr 
            { parser.Tree.reduce(3,"expr",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a + b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr STAR expr 
            { parser.Tree.reduce(3,"expr",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a * b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= MAX RO expl RC 
            { parser.Tree.reduce(4,"expr",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= REAL 
            { parser.Tree.reduce(1,"expr",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expl ::= expr 
            { parser.Tree.reduce(1,"expl",0);
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expl ::= expl CM expr 
            { parser.Tree.reduce(3,"expl",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(a>b){RESULT=a;}else{RESULT=b;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
