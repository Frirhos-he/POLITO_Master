// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: scanner.jflex

import java_cup.runtime.*;
 

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\3\0\1\7\1\0\1\10\1\11\2\12\1\13"+
    "\1\14\1\0\1\15\1\16\1\17\1\20\1\21\2\22"+
    "\4\23\1\24\1\25\1\0\1\26\1\0\1\27\1\0"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\2\36\1\37"+
    "\1\40\1\36\1\41\1\36\1\42\1\43\1\44\1\36"+
    "\1\45\1\46\1\47\1\50\2\36\3\51\1\52\1\0"+
    "\1\53\1\0\1\36\1\0\1\54\1\55\1\56\1\57"+
    "\1\60\1\57\1\61\1\36\1\62\2\36\1\63\1\64"+
    "\1\65\1\66\1\67\1\36\1\70\1\71\1\72\1\73"+
    "\1\74\2\36\1\75\1\36\1\0\1\76\10\0\1\3"+
    "\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\12\13\1\1\1\14\1\0"+
    "\1\15\1\0\1\13\1\0\1\16\1\13\1\17\1\20"+
    "\1\0\1\21\1\13\1\0\1\13\2\0\1\22\4\0"+
    "\2\13\5\0\1\13\1\0\1\13\1\0\1\23\4\0"+
    "\1\24\1\13\3\0\1\13\1\0\1\25\5\0\1\26"+
    "\1\0\1\27\67\0\1\30\5\0\1\30\10\0\1\30"+
    "\6\0\1\30\1\0\1\31\1\0\2\30\7\0\1\30"+
    "\5\0\3\32\1\30\4\0\1\30\4\0\1\30\10\0"+
    "\1\30\7\0\1\30\6\0\1\30\5\0\1\30\4\0"+
    "\1\30\3\0\1\30\2\0\1\30\2\0\1\30\1\0"+
    "\1\31\1\30\1\0\1\30\1\0\4\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[243];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\77\0\176\0\77\0\275\0\77\0\77"+
    "\0\77\0\77\0\77\0\77\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\77\0\275\0\77\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec"+
    "\0\u017a\0\u017a\0\u052b\0\u017a\0\u056a\0\u05a9\0\u05e8\0\u0627"+
    "\0\u0666\0\u017a\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0"+
    "\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8"+
    "\0\u0a17\0\77\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u017a\0\u0b52"+
    "\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u017a\0\u0ccc\0\u0d0b"+
    "\0\u0d4a\0\u0d89\0\u0dc8\0\u017a\0\u0e07\0\u017a\0\u0e46\0\u0e85"+
    "\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d"+
    "\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275"+
    "\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d"+
    "\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665"+
    "\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d"+
    "\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55"+
    "\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d"+
    "\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45"+
    "\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d"+
    "\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u1f41"+
    "\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee"+
    "\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6"+
    "\0\u1b90\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f"+
    "\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997"+
    "\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f"+
    "\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87"+
    "\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f"+
    "\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u3177"+
    "\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u32f1\0\u3330\0\u336f"+
    "\0\u33ae\0\u33ed\0\77\0\u342c\0\u346b\0\u34aa\0\u34e9\0\u3528"+
    "\0\u3567\0\u35a6\0\u35e5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[243];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\2\1\12\10\2\1\13\1\14\1\15\1\2"+
    "\1\16\2\17\1\20\1\17\1\21\1\17\1\22\2\17"+
    "\1\23\1\24\1\25\1\26\1\17\1\27\2\17\1\30"+
    "\1\2\22\17\1\31\101\0\1\3\74\0\6\32\1\33"+
    "\70\32\26\0\1\34\66\0\6\17\4\0\12\17\1\35"+
    "\7\17\2\0\22\17\17\0\6\17\4\0\22\17\2\0"+
    "\22\17\15\0\1\36\1\0\6\17\4\0\13\17\1\37"+
    "\6\17\2\0\22\17\17\0\6\17\4\0\1\40\6\17"+
    "\1\41\12\17\2\0\22\17\17\0\6\17\4\0\5\17"+
    "\1\42\14\17\2\0\22\17\15\0\1\43\1\0\6\17"+
    "\4\0\22\17\2\0\22\17\17\0\6\17\4\0\15\17"+
    "\1\44\4\17\2\0\22\17\17\0\6\17\4\0\15\17"+
    "\1\45\4\17\2\0\22\17\15\0\1\46\1\0\6\17"+
    "\4\0\22\17\2\0\22\17\17\0\6\17\4\0\15\17"+
    "\1\47\4\17\2\0\22\17\53\0\1\50\52\0\1\51"+
    "\66\0\6\17\4\0\3\17\1\52\16\17\2\0\22\17"+
    "\17\0\1\53\1\54\1\55\1\56\73\0\6\17\4\0"+
    "\12\17\1\57\7\17\2\0\22\17\17\0\6\17\4\0"+
    "\11\17\1\60\10\17\2\0\22\17\17\0\2\61\1\62"+
    "\3\63\4\0\1\63\1\64\4\65\16\0\1\63\1\64"+
    "\3\65\34\0\6\17\4\0\7\17\1\66\12\17\2\0"+
    "\22\17\52\0\1\67\24\0\1\67\16\0\6\17\4\0"+
    "\20\17\1\70\1\17\2\0\22\17\15\0\1\71\110\0"+
    "\1\72\67\0\3\73\2\74\71\0\5\74\1\75\71\0"+
    "\6\75\71\0\1\75\1\76\75\0\6\17\4\0\4\17"+
    "\1\77\15\17\2\0\22\17\17\0\6\17\4\0\16\17"+
    "\1\100\3\17\2\0\22\17\17\0\6\65\4\0\6\65"+
    "\16\0\5\65\34\0\6\65\4\0\1\65\5\101\16\0"+
    "\5\65\34\0\6\101\4\0\6\101\16\0\5\101\34\0"+
    "\6\101\4\0\2\101\1\102\3\103\16\0\2\101\1\102"+
    "\2\103\34\0\6\103\4\0\6\103\16\0\5\103\34\0"+
    "\6\17\4\0\12\17\1\104\7\17\2\0\22\17\52\0"+
    "\1\105\24\0\1\105\16\0\6\17\4\0\4\17\1\106"+
    "\15\17\2\0\22\17\15\0\1\107\77\0\1\110\76\0"+
    "\1\111\76\0\1\112\76\0\1\113\77\0\6\17\4\0"+
    "\4\17\1\114\15\17\2\0\22\17\13\0\1\115\2\0"+
    "\1\115\6\103\4\0\6\103\16\0\5\103\30\0\1\115"+
    "\2\0\1\115\4\103\67\0\1\115\2\0\1\115\77\0"+
    "\6\17\4\0\17\17\1\116\2\17\2\0\22\17\52\0"+
    "\1\117\24\0\1\117\14\107\1\120\62\107\30\0\1\121"+
    "\2\0\1\122\4\0\1\123\1\0\1\124\1\125\2\0"+
    "\1\126\60\0\1\121\2\0\1\122\4\0\1\127\1\0"+
    "\1\124\1\125\2\0\1\126\60\0\1\121\2\0\1\122"+
    "\4\0\1\130\1\0\1\124\1\125\2\0\1\126\60\0"+
    "\1\121\2\0\1\122\4\0\1\130\2\0\1\125\51\0"+
    "\2\131\1\132\3\133\4\0\1\133\1\134\4\135\16\0"+
    "\1\133\1\134\3\135\67\0\1\136\24\0\1\136\14\107"+
    "\1\137\62\107\73\0\1\140\65\0\1\141\70\0\1\142"+
    "\110\0\1\143\66\0\1\144\100\0\1\145\72\0\1\142"+
    "\16\0\1\146\76\0\1\146\21\0\6\135\4\0\6\135"+
    "\16\0\5\135\34\0\6\135\4\0\1\135\5\147\16\0"+
    "\5\135\34\0\6\147\4\0\6\147\16\0\5\147\34\0"+
    "\6\147\4\0\2\147\1\150\3\151\16\0\2\147\1\150"+
    "\2\151\34\0\6\151\4\0\6\151\16\0\5\151\67\0"+
    "\1\152\24\0\1\152\14\107\1\137\36\107\1\153\23\107"+
    "\61\0\1\154\73\0\1\155\105\0\1\156\105\0\1\155"+
    "\74\0\1\157\73\0\1\160\72\0\1\161\25\0\1\162"+
    "\2\0\1\162\6\151\4\0\6\151\16\0\5\151\30\0"+
    "\1\162\2\0\1\162\4\151\67\0\1\162\2\0\1\162"+
    "\132\0\1\163\24\0\1\163\14\107\1\120\36\107\1\3"+
    "\23\107\73\0\1\164\63\0\1\165\111\0\1\166\71\0"+
    "\1\167\102\0\1\155\101\0\1\170\17\0\2\171\1\172"+
    "\3\173\4\0\1\173\1\174\4\175\16\0\1\173\1\174"+
    "\3\175\67\0\1\176\24\0\1\176\71\0\1\177\71\0"+
    "\1\167\66\0\1\200\77\0\1\201\36\0\1\202\77\0"+
    "\6\175\4\0\6\175\16\0\5\175\34\0\6\175\4\0"+
    "\1\175\5\203\16\0\5\175\34\0\6\203\4\0\6\203"+
    "\16\0\5\203\34\0\6\203\4\0\2\203\1\204\3\205"+
    "\16\0\2\203\1\204\2\205\34\0\6\205\4\0\6\205"+
    "\16\0\5\205\67\0\1\206\24\0\1\206\72\0\1\170"+
    "\74\0\1\207\66\0\1\210\36\0\1\211\70\0\1\212"+
    "\2\0\1\212\6\205\4\0\6\205\16\0\5\205\30\0"+
    "\1\212\2\0\1\212\4\205\67\0\1\212\2\0\1\212"+
    "\110\0\1\213\21\0\1\214\24\0\1\214\75\0\1\215"+
    "\71\0\1\170\24\0\1\216\76\0\2\217\1\220\3\221"+
    "\4\0\1\221\1\222\4\223\16\0\1\221\1\222\3\223"+
    "\45\0\1\224\76\0\1\213\21\0\1\225\24\0\1\225"+
    "\15\0\1\226\101\0\1\227\74\0\6\223\4\0\6\223"+
    "\16\0\5\223\34\0\6\223\4\0\1\223\5\230\16\0"+
    "\5\223\34\0\6\230\4\0\6\230\16\0\5\230\34\0"+
    "\6\230\4\0\2\230\1\231\3\232\16\0\2\230\1\231"+
    "\2\232\34\0\6\232\4\0\6\232\16\0\5\232\45\0"+
    "\1\233\76\0\1\213\21\0\1\234\24\0\1\234\20\0"+
    "\1\235\76\0\1\236\70\0\1\237\2\0\1\237\6\232"+
    "\4\0\6\232\16\0\5\232\30\0\1\237\2\0\1\237"+
    "\4\232\67\0\1\237\2\0\1\237\110\0\1\240\76\0"+
    "\1\213\21\0\1\241\24\0\1\241\16\0\1\242\74\0"+
    "\1\243\100\0\2\244\1\245\3\246\4\0\1\246\1\247"+
    "\4\250\16\0\1\246\1\247\3\250\45\0\1\213\21\0"+
    "\1\251\24\0\1\251\20\0\1\252\74\0\1\253\1\254"+
    "\1\255\1\256\73\0\6\250\4\0\6\250\16\0\5\250"+
    "\34\0\6\250\4\0\1\250\5\257\16\0\5\250\34\0"+
    "\6\257\4\0\6\257\16\0\5\257\34\0\6\257\4\0"+
    "\2\257\1\260\3\261\16\0\2\257\1\260\2\261\34\0"+
    "\6\261\4\0\6\261\16\0\5\261\45\0\1\213\21\0"+
    "\1\262\24\0\1\262\21\0\1\236\74\0\3\263\2\264"+
    "\71\0\5\264\1\265\71\0\6\265\71\0\1\265\1\266"+
    "\71\0\1\212\2\0\1\212\6\261\4\0\6\261\16\0"+
    "\5\261\30\0\1\212\2\0\1\212\4\261\104\0\1\213"+
    "\21\0\1\267\24\0\1\267\15\0\1\270\76\0\1\271"+
    "\76\0\1\272\76\0\1\273\110\0\1\213\21\0\1\274"+
    "\24\0\1\274\30\0\1\275\2\0\1\276\4\0\1\277"+
    "\1\0\1\300\1\301\2\0\1\302\60\0\1\275\2\0"+
    "\1\276\4\0\1\303\1\0\1\300\1\301\2\0\1\302"+
    "\60\0\1\275\2\0\1\276\4\0\1\304\1\0\1\300"+
    "\1\301\2\0\1\302\60\0\1\275\2\0\1\276\4\0"+
    "\1\304\2\0\1\301\62\0\1\213\21\0\1\305\24\0"+
    "\1\305\73\0\1\306\65\0\1\307\70\0\1\310\110\0"+
    "\1\311\66\0\1\312\100\0\1\313\72\0\1\310\16\0"+
    "\1\314\76\0\1\314\32\0\1\213\21\0\1\315\24\0"+
    "\1\315\61\0\1\316\73\0\1\317\105\0\1\320\105\0"+
    "\1\317\74\0\1\321\73\0\1\322\72\0\1\323\42\0"+
    "\1\213\21\0\1\324\24\0\1\324\73\0\1\325\63\0"+
    "\1\326\111\0\1\327\71\0\1\330\102\0\1\317\101\0"+
    "\1\331\30\0\1\213\21\0\1\332\24\0\1\332\71\0"+
    "\1\333\71\0\1\330\66\0\1\334\77\0\1\335\36\0"+
    "\1\336\110\0\1\213\21\0\1\337\24\0\1\337\72\0"+
    "\1\331\74\0\1\340\66\0\1\341\36\0\1\342\105\0"+
    "\1\213\21\0\1\343\24\0\1\343\75\0\1\344\71\0"+
    "\1\331\24\0\1\345\107\0\1\213\21\0\1\346\24\0"+
    "\1\346\15\0\1\347\101\0\1\350\105\0\1\213\21\0"+
    "\1\351\24\0\1\351\20\0\1\352\76\0\1\353\105\0"+
    "\1\213\21\0\1\354\24\0\1\354\16\0\1\355\107\0"+
    "\1\213\21\0\1\356\24\0\1\356\20\0\1\357\105\0"+
    "\1\213\21\0\1\360\24\0\1\360\21\0\1\353\104\0"+
    "\1\213\21\0\1\361\24\0\1\361\27\0\1\213\21\0"+
    "\1\362\24\0\1\362\27\0\1\213\21\0\1\363\24\0"+
    "\1\363\27\0\1\213\47\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13860];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\1\1\6\11\14\1\1\11"+
    "\1\0\1\11\1\0\1\1\1\0\4\1\1\0\2\1"+
    "\1\0\1\1\2\0\1\1\4\0\2\1\5\0\1\1"+
    "\1\0\1\1\1\0\1\11\4\0\2\1\3\0\1\1"+
    "\1\0\1\1\5\0\1\1\1\0\1\1\67\0\1\1"+
    "\5\0\1\1\10\0\1\1\6\0\1\1\1\0\1\1"+
    "\1\0\2\1\7\0\1\1\5\0\4\1\4\0\1\1"+
    "\4\0\1\1\10\0\1\1\7\0\1\1\6\0\1\1"+
    "\5\0\1\1\4\0\1\1\3\0\1\1\2\0\1\1"+
    "\2\0\1\1\1\0\1\11\1\1\1\0\1\1\1\0"+
    "\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[243];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	private Symbol sym(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
 
	private Symbol sym(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}

	//true if debug printing
	private boolean test = false;
 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Scanner Error: " + yytext());
            }
            // fall through
          case 27: break;
          case 2:
            { if(test)System.out.print(yytext());
            }
            // fall through
          case 28: break;
          case 3:
            { if(test)System.out.print(yytext());return sym(sym.NOT);
            }
            // fall through
          case 29: break;
          case 4:
            { if(test)System.out.print(yytext());return sym(sym.AND);
            }
            // fall through
          case 30: break;
          case 5:
            { if(test)System.out.print(yytext());return sym(sym.RO);
            }
            // fall through
          case 31: break;
          case 6:
            { if(test)System.out.print(yytext());return sym(sym.RC);
            }
            // fall through
          case 32: break;
          case 7:
            { if(test)System.out.print(yytext());return sym(sym.CM);
            }
            // fall through
          case 33: break;
          case 8:
            { if(test)System.out.print(yytext());return sym(sym.COL);
            }
            // fall through
          case 34: break;
          case 9:
            { if(test)System.out.print(yytext());return sym(sym.S);
            }
            // fall through
          case 35: break;
          case 10:
            { if(test)System.out.print(yytext());return sym(sym.EQ);
            }
            // fall through
          case 36: break;
          case 11:
            { if(test)System.out.print(yytext());return sym(sym.VARIABLE, new String(yytext()));
            }
            // fall through
          case 37: break;
          case 12:
            { if(test)System.out.print(yytext());return sym(sym.OR);
            }
            // fall through
          case 38: break;
          case 13:
            { if(test)System.out.print(yytext());return sym(sym.QSTRING, new String(yytext()));
            }
            // fall through
          case 39: break;
          case 14:
            { if(test)System.out.print(yytext());return sym(sym.DO);
            }
            // fall through
          case 40: break;
          case 15:
            { if(test)System.out.print(yytext());return sym(sym.FI);
            }
            // fall through
          case 41: break;
          case 16:
            { if(test)System.out.print(yytext());return sym(sym.IF);
            }
            // fall through
          case 42: break;
          case 17:
            { if(test)System.out.print(yytext());return sym(sym.ORS);
            }
            // fall through
          case 43: break;
          case 18:
            { if(test)System.out.print(yytext());return sym(sym.ANDS);
            }
            // fall through
          case 44: break;
          case 19:
            { if(test)System.out.print(yytext()); return sym(sym.SEP);
            }
            // fall through
          case 45: break;
          case 20:
            { if(test)System.out.print(yytext());return sym(sym.DONE);
            }
            // fall through
          case 46: break;
          case 21:
            { if(test)System.out.print(yytext());return sym(sym.TRUE);
            }
            // fall through
          case 47: break;
          case 22:
            { if(test)System.out.print(yytext());return sym(sym.FALSE);
            }
            // fall through
          case 48: break;
          case 23:
            { if(test)System.out.print(yytext());return sym(sym.PRINT);
            }
            // fall through
          case 49: break;
          case 24:
            { if(test)System.out.print(yytext());return sym(sym.TOK2, new String(yytext()));
            }
            // fall through
          case 50: break;
          case 25:
            { if(test)System.out.print(yytext());return sym(sym.TOK1, new String(yytext()));
            }
            // fall through
          case 51: break;
          case 26:
            { if(test)System.out.print(yytext());return sym(sym.TOK3, new String(yytext()));
            }
            // fall through
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
