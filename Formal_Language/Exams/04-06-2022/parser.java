
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\003\000\002\004\013\000\002\004\014" +
    "\000\002\004\022\000\002\006\007\000\002\006\002\000" +
    "\002\007\004\000\002\007\004\000\002\005\013\000\002" +
    "\010\005\000\002\010\005\000\002\010\002\000\002\011" +
    "\003\000\002\011\002\000\002\017\005\000\002\017\007" +
    "\000\002\012\003\000\002\012\003\000\002\013\006\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\004\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\014\006\000\002\016\010\000\002\016\010" +
    "\000\002\016\010\000\002\016\010\000\002\020\005\000" +
    "\002\021\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\006\006\007\007\004\001\002\000\004\010" +
    "\132\001\002\000\004\004\ufffe\001\002\000\004\004\uffff" +
    "\001\002\000\004\010\103\001\002\000\004\002\102\001" +
    "\002\000\004\004\012\001\002\000\010\002\ufff1\023\021" +
    "\031\016\001\002\000\010\002\uffee\023\uffee\031\uffee\001" +
    "\002\000\010\002\ufff2\023\021\031\016\001\002\000\010" +
    "\002\uffed\023\uffed\031\uffed\001\002\000\014\016\024\020" +
    "\027\023\030\027\025\030\026\001\002\000\006\023\021" +
    "\031\016\001\002\000\004\002\000\001\002\000\004\013" +
    "\022\001\002\000\014\016\024\020\027\023\030\027\025" +
    "\030\026\001\002\000\010\010\040\014\032\015\034\001" +
    "\002\000\014\016\024\020\027\023\030\027\025\030\026" +
    "\001\002\000\020\010\uffe7\014\uffe7\015\uffe7\021\uffe7\033" +
    "\uffe7\036\uffe7\037\uffe7\001\002\000\020\010\uffe6\014\uffe6" +
    "\015\uffe6\021\uffe6\033\uffe6\036\uffe6\037\uffe6\001\002\000" +
    "\014\016\024\020\027\023\030\027\025\030\026\001\002" +
    "\000\020\010\uffe5\014\uffe5\015\uffe5\021\uffe5\033\uffe5\036" +
    "\uffe5\037\uffe5\001\002\000\010\014\032\015\034\021\033" +
    "\001\002\000\014\016\024\020\027\023\030\027\025\030" +
    "\026\001\002\000\020\010\uffe9\014\uffe9\015\uffe9\021\uffe9" +
    "\033\uffe9\036\uffe9\037\uffe9\001\002\000\014\016\024\020" +
    "\027\023\030\027\025\030\026\001\002\000\020\010\uffeb" +
    "\014\032\015\uffeb\021\uffeb\033\uffeb\036\uffeb\037\uffeb\001" +
    "\002\000\020\010\uffea\014\uffea\015\uffea\021\uffea\033\uffea" +
    "\036\uffea\037\uffea\001\002\000\020\010\uffe8\014\uffe8\015" +
    "\uffe8\021\uffe8\033\uffe8\036\uffe8\037\uffe8\001\002\000\010" +
    "\002\uffec\023\uffec\031\uffec\001\002\000\006\023\021\031" +
    "\016\001\002\000\006\023\021\031\016\001\002\000\006" +
    "\023\021\031\016\001\002\000\010\002\uffef\023\uffef\031" +
    "\uffef\001\002\000\012\014\032\015\034\036\uffde\037\uffde" +
    "\001\002\000\006\036\066\037\067\001\002\000\010\032" +
    "\050\036\051\037\052\001\002\000\010\002\uffe4\023\uffe4" +
    "\031\uffe4\001\002\000\014\016\024\020\027\023\030\027" +
    "\025\030\026\001\002\000\014\016\024\020\027\023\030" +
    "\027\025\030\026\001\002\000\010\014\032\015\034\033" +
    "\054\001\002\000\004\035\055\001\002\000\004\022\060" +
    "\001\002\000\004\034\057\001\002\000\010\032\uffe2\036" +
    "\uffe2\037\uffe2\001\002\000\004\010\061\001\002\000\004" +
    "\034\uffdf\001\002\000\010\014\032\015\034\033\063\001" +
    "\002\000\004\035\055\001\002\000\004\034\065\001\002" +
    "\000\010\032\uffe3\036\uffe3\037\uffe3\001\002\000\014\016" +
    "\024\020\027\023\030\027\025\030\026\001\002\000\014" +
    "\016\024\020\027\023\030\027\025\030\026\001\002\000" +
    "\010\014\032\015\034\033\071\001\002\000\004\035\055" +
    "\001\002\000\004\034\073\001\002\000\010\032\uffe1\036" +
    "\uffe1\037\uffe1\001\002\000\010\014\032\015\034\033\075" +
    "\001\002\000\004\035\055\001\002\000\004\034\077\001" +
    "\002\000\010\032\uffe0\036\uffe0\037\uffe0\001\002\000\006" +
    "\023\021\031\016\001\002\000\010\002\ufff0\023\ufff0\031" +
    "\ufff0\001\002\000\004\002\001\001\002\000\004\006\104" +
    "\001\002\000\004\010\105\001\002\000\004\006\106\001" +
    "\002\000\004\010\107\001\002\000\010\005\ufff9\006\ufff9" +
    "\007\ufff9\001\002\000\010\005\113\006\112\007\111\001" +
    "\002\000\004\010\131\001\002\000\004\010\126\001\002" +
    "\000\004\010\125\001\002\000\006\005\113\007\111\001" +
    "\002\000\010\004\ufffd\005\113\007\111\001\002\000\010" +
    "\004\ufffc\005\113\007\111\001\002\000\006\005\113\007" +
    "\111\001\002\000\006\005\113\007\111\001\002\000\006" +
    "\005\113\007\111\001\002\000\006\005\113\007\111\001" +
    "\002\000\006\005\113\007\111\001\002\000\004\004\ufffb" +
    "\001\002\000\010\004\ufff8\005\ufff8\007\ufff8\001\002\000" +
    "\004\006\127\001\002\000\004\010\130\001\002\000\010" +
    "\005\ufffa\006\ufffa\007\ufffa\001\002\000\010\004\ufff7\005" +
    "\ufff7\007\ufff7\001\002\000\010\005\ufff3\006\ufff3\007\ufff3" +
    "\001\002\000\010\005\136\006\135\007\134\001\002\000" +
    "\004\010\141\001\002\000\004\010\140\001\002\000\004" +
    "\010\137\001\002\000\012\004\ufff5\005\ufff5\006\ufff5\007" +
    "\ufff5\001\002\000\012\004\ufff4\005\ufff4\006\ufff4\007\ufff4" +
    "\001\002\000\010\005\ufff3\006\ufff3\007\ufff3\001\002\000" +
    "\010\005\136\006\135\007\143\001\002\000\004\010\144" +
    "\001\002\000\010\004\ufff3\005\ufff3\006\ufff3\001\002\000" +
    "\010\004\ufff6\005\136\006\135\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\012\002\007\003\010\004\005\005\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\011\017\012\016\013\012\014\014\017\013\001\001" +
    "\000\002\001\001\000\010\012\077\013\012\014\014\001" +
    "\001\000\002\001\001\000\004\015\044\001\001\000\010" +
    "\012\040\013\012\014\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\022\001\001\000\002\001\001" +
    "\000\004\015\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\035\001\001\000\002\001\001\000" +
    "\004\015\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\041\013" +
    "\012\014\014\001\001\000\010\012\042\013\012\014\014" +
    "\001\001\000\010\012\043\013\012\014\014\001\001\000" +
    "\002\001\001\000\006\016\046\021\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\061\001\001\000\004\015\052\001\001\000\002\001\001" +
    "\000\004\020\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\073\001\001\000\004" +
    "\015\067\001\001\000\002\001\001\000\004\020\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\100\013\012\014\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\107" +
    "\001\001\000\004\007\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\114\001\001" +
    "\000\004\007\115\001\001\000\004\007\116\001\001\000" +
    "\004\007\117\001\001\000\004\007\120\001\001\000\004" +
    "\007\121\001\001\000\004\007\122\001\001\000\004\007" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\144\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap<String, Boolean>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


 
    public HashMap<String, Boolean> table;
 
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
 
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= starter EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // starter ::= header SEP execution 
            { parser.Tree.reduce(3,"starter",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("starter",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= sequence_1 
            { parser.Tree.reduce(1,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= sequence_2 
            { parser.Tree.reduce(1,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sequence_1 ::= TOK2 S TOK2 S TOK2 S rep_tok2 rep_tok rep_tok 
            { parser.Tree.reduce(9,"sequence_1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence_1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sequence_1 ::= TOK2 S TOK2 S TOK2 S rep_tok2 rep_tok rep_tok rep_tok 
            { parser.Tree.reduce(10,"sequence_1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence_1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sequence_1 ::= TOK2 S TOK2 S TOK2 S rep_tok2 rep_tok rep_tok rep_tok rep_tok rep_tok rep_tok rep_tok rep_tok rep_tok 
            { parser.Tree.reduce(16,"sequence_1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence_1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // rep_tok2 ::= rep_tok2 TOK2 S TOK2 S 
            { parser.Tree.reduce(5,"rep_tok2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep_tok2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // rep_tok2 ::= 
            { parser.Tree.reduce(0,"rep_tok2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep_tok2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // rep_tok ::= TOK1 S 
            { parser.Tree.reduce(2,"rep_tok",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep_tok",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // rep_tok ::= TOK3 S 
            { parser.Tree.reduce(2,"rep_tok",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep_tok",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sequence_2 ::= TOK3 S rep_tok12 TOK3 S rep_tok12 TOK3 S rep_tok12 
            { parser.Tree.reduce(9,"sequence_2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence_2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // rep_tok12 ::= rep_tok12 TOK1 S 
            { parser.Tree.reduce(3,"rep_tok12",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep_tok12",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // rep_tok12 ::= rep_tok12 TOK2 S 
            { parser.Tree.reduce(3,"rep_tok12",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep_tok12",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // rep_tok12 ::= 
            { parser.Tree.reduce(0,"rep_tok12",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rep_tok12",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // execution ::= repetition_command 
            { parser.Tree.reduce(1,"execution",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("execution",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // execution ::= 
            { parser.Tree.reduce(0,"execution",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("execution",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // repetition_command ::= repetition_command command command 
            { parser.Tree.reduce(3,"repetition_command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repetition_command",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // repetition_command ::= command command command command command 
            { parser.Tree.reduce(5,"repetition_command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repetition_command",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // command ::= ass 
            { parser.Tree.reduce(1,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // command ::= if 
            { parser.Tree.reduce(1,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ass ::= VARIABLE EQ bexpr S 
            { parser.Tree.reduce(4,"ass",0);
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.table.put(var,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bexpr ::= bexpr OR bexpr 
            { parser.Tree.reduce(3,"bexpr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a || b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bexpr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bexpr ::= bexpr AND bexpr 
            { parser.Tree.reduce(3,"bexpr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a && b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bexpr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bexpr ::= RO bexpr RC 
            { parser.Tree.reduce(3,"bexpr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bexpr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bexpr ::= NOT bexpr 
            { parser.Tree.reduce(2,"bexpr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = !a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bexpr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bexpr ::= TRUE 
            { parser.Tree.reduce(1,"bexpr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bexpr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bexpr ::= FALSE 
            { parser.Tree.reduce(1,"bexpr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bexpr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bexpr ::= VARIABLE 
            { parser.Tree.reduce(1,"bexpr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT =  parser.table.get(a);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bexpr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // if ::= IF bexpr list_comp FI 
            { parser.Tree.reduce(4,"if",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // list_comp ::= list_comp ORS bexpr DO print DONE 
            { parser.Tree.reduce(6,"list_comp",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Boolean res = (Boolean) parser.stack(-6);
        if(x == true || res == true) {
                System.out.println(p);
        }


              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // list_comp ::= list_comp ANDS bexpr DO print DONE 
            { parser.Tree.reduce(6,"list_comp",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Boolean res = (Boolean) parser.stack(-6);
        if(x == true && res == true) {
                System.out.println(p);
        }


              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // list_comp ::= N ANDS bexpr DO print DONE 
            { parser.Tree.reduce(6,"list_comp",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Boolean res = (Boolean) parser.stack(-6);
        if(x == true && res == true) {
                System.out.println(p);
        }



              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // list_comp ::= N ORS bexpr DO print DONE 
            { parser.Tree.reduce(6,"list_comp",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

        Boolean res = (Boolean) parser.stack(-6);
        if(x == true || res == true) {
                System.out.println(p);
        }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // print ::= PRINT QSTRING S 
            { parser.Tree.reduce(3,"print",0);
              String RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // N ::= 
            { parser.Tree.reduce(0,"N",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("N",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
