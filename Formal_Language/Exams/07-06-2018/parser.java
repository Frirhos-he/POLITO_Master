
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\022\006" +
    "\000\002\023\011\000\002\024\003\000\002\025\002\000" +
    "\002\025\005\000\002\025\005\000\002\004\005\000\002" +
    "\005\012\000\002\005\012\000\002\006\020\000\002\006" +
    "\007\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\010\004\000\002\011\012\000" +
    "\002\011\012\000\002\011\007\000\002\011\005\000\002" +
    "\012\010\000\002\027\003\000\002\027\005\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\030\003\000\002\030\003\000" +
    "\002\013\005\000\002\014\007\000\002\014\007\000\002" +
    "\021\002\000\002\031\004\000\002\031\004\000\002\031" +
    "\006\000\002\015\004\000\002\015\004\000\002\020\004" +
    "\000\002\020\004\000\002\016\004\000\002\017\012\000" +
    "\002\017\012\000\002\017\007\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\012\004\ufff9\005\ufff9\006\ufff9\007\ufff9\001" +
    "\002\000\006\004\ufffd\007\211\001\002\000\012\004\ufffa" +
    "\005\206\006\205\007\ufffa\001\002\000\006\004\ufffe\007" +
    "\202\001\002\000\004\002\201\001\002\000\004\004\uffff" +
    "\001\002\000\004\004\012\001\002\000\004\013\013\001" +
    "\002\000\006\014\163\015\164\001\002\000\004\002\000" +
    "\001\002\000\004\010\016\001\002\000\012\016\020\017" +
    "\030\020\024\024\027\001\002\000\004\010\ufff1\001\002" +
    "\000\004\044\162\001\002\000\004\010\145\001\002\000" +
    "\004\010\uffee\001\002\000\014\002\ufff6\016\020\017\030" +
    "\020\024\024\027\001\002\000\004\042\127\001\002\000" +
    "\004\010\ufff0\001\002\000\004\010\uffef\001\002\000\014" +
    "\014\047\021\053\022\052\023\051\046\050\001\002\000" +
    "\006\014\031\015\032\001\002\000\004\046\041\001\002" +
    "\000\004\046\033\001\002\000\004\046\034\001\002\000" +
    "\004\046\035\001\002\000\006\010\uffea\036\036\001\002" +
    "\000\004\014\037\001\002\000\004\046\040\001\002\000" +
    "\004\010\uffec\001\002\000\006\010\uffe9\036\042\001\002" +
    "\000\004\015\043\001\002\000\004\046\044\001\002\000" +
    "\004\046\045\001\002\000\004\046\046\001\002\000\004" +
    "\010\uffeb\001\002\000\014\011\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\043\uffe2\001\002\000\014\011\uffe1\027\uffe1\030\uffe1" +
    "\031\uffe1\043\uffe1\001\002\000\014\011\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\043\uffe3\001\002\000\014\011\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\043\uffe4\001\002\000\014\011\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\043\uffe5\001\002\000\010\027\uffdb" +
    "\030\uffdb\031\uffdb\001\002\000\012\010\uffde\027\062\030" +
    "\057\031\061\001\002\000\010\027\062\030\057\031\061" +
    "\001\002\000\004\046\122\001\002\000\004\025\067\001" +
    "\002\000\004\046\064\001\002\000\004\046\063\001\002" +
    "\000\004\025\uffd9\001\002\000\004\032\065\001\002\000" +
    "\004\046\066\001\002\000\004\025\uffd8\001\002\000\006" +
    "\016\uffdb\017\uffdb\001\002\000\010\016\076\017\072\026" +
    "\121\001\002\000\006\016\076\017\072\001\002\000\006" +
    "\014\102\015\103\001\002\000\010\016\uffd7\017\uffd7\026" +
    "\uffd7\001\002\000\004\010\101\001\002\000\004\010\100" +
    "\001\002\000\004\044\077\001\002\000\004\010\uffd3\001" +
    "\002\000\010\016\uffd5\017\uffd5\026\uffd5\001\002\000\010" +
    "\016\uffd4\017\uffd4\026\uffd4\001\002\000\004\046\112\001" +
    "\002\000\004\046\104\001\002\000\004\046\105\001\002" +
    "\000\004\046\106\001\002\000\006\010\uffd0\036\107\001" +
    "\002\000\004\014\110\001\002\000\004\046\111\001\002" +
    "\000\004\010\uffd2\001\002\000\006\010\uffcf\036\113\001" +
    "\002\000\004\015\114\001\002\000\004\046\115\001\002" +
    "\000\004\046\116\001\002\000\004\046\117\001\002\000" +
    "\004\010\uffd1\001\002\000\010\016\uffd6\017\uffd6\026\uffd6" +
    "\001\002\000\012\010\uffdd\027\uffdd\030\uffdd\031\uffdd\001" +
    "\002\000\004\025\uffda\001\002\000\004\025\124\001\002" +
    "\000\006\016\uffdb\017\uffdb\001\002\000\010\016\076\017" +
    "\072\026\126\001\002\000\012\010\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\001\002\000\006\033\130\034\132\001\002\000" +
    "\004\011\uffdf\001\002\000\004\011\133\001\002\000\004" +
    "\011\uffe0\001\002\000\014\014\047\021\053\022\052\023" +
    "\051\046\050\001\002\000\006\011\136\043\137\001\002" +
    "\000\006\011\uffe7\043\uffe7\001\002\000\014\014\047\021" +
    "\053\022\052\023\051\046\050\001\002\000\004\010\uffe8" +
    "\001\002\000\006\011\uffe6\043\uffe6\001\002\000\004\010" +
    "\142\001\002\000\012\016\020\017\030\020\024\024\027" +
    "\001\002\000\004\010\144\001\002\000\014\002\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\024\ufff2\001\002\000\012\016\020" +
    "\017\030\020\024\024\027\001\002\000\004\010\147\001" +
    "\002\000\012\016\020\017\030\020\024\024\027\001\002" +
    "\000\004\010\151\001\002\000\012\016\020\017\030\020" +
    "\024\024\027\001\002\000\004\010\153\001\002\000\012" +
    "\016\020\017\030\020\024\024\027\001\002\000\004\010" +
    "\155\001\002\000\012\016\020\017\030\020\024\024\027" +
    "\001\002\000\004\010\157\001\002\000\012\016\020\017" +
    "\030\020\024\024\027\001\002\000\004\010\161\001\002" +
    "\000\014\002\ufff3\016\ufff3\017\ufff3\020\ufff3\024\ufff3\001" +
    "\002\000\004\010\uffed\001\002\000\004\046\173\001\002" +
    "\000\004\046\165\001\002\000\004\046\166\001\002\000" +
    "\004\046\167\001\002\000\004\036\170\001\002\000\004" +
    "\014\171\001\002\000\004\046\172\001\002\000\004\010" +
    "\ufff5\001\002\000\004\036\174\001\002\000\004\015\175" +
    "\001\002\000\004\046\176\001\002\000\004\046\177\001" +
    "\002\000\004\046\200\001\002\000\004\010\ufff4\001\002" +
    "\000\004\002\001\001\002\000\004\010\203\001\002\000" +
    "\010\004\ufff9\005\ufff9\006\ufff9\001\002\000\010\004\ufffc" +
    "\005\206\006\205\001\002\000\004\010\210\001\002\000" +
    "\004\010\207\001\002\000\012\004\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\001\002\000\012\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\001\002\000\004\010\212\001\002\000\010\005\ufff9" +
    "\006\ufff9\007\ufff9\001\002\000\010\005\206\006\205\007" +
    "\214\001\002\000\004\010\215\001\002\000\012\004\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\001\002\000\012\004\ufffb\005" +
    "\206\006\205\007\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\016\002\006\003\010\022\007\023\005\024" +
    "\003\025\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\013\005\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\022\007\020\010\016\011\024\012\025\013\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\140\010\016\011\024\012\025" +
    "\013\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\054\021\055\001\001\000\004\031\122\001\001\000" +
    "\004\031\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\067\021\070\001\001\000\010\016\074\017\073\020" +
    "\117\001\001\000\010\016\074\017\073\020\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\124\021\070\001\001\000\010\016\074\017" +
    "\073\020\117\001\001\000\002\001\001\000\004\030\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\134\027\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\142" +
    "\010\016\011\024\012\025\013\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\145\010\016\011\024" +
    "\012\025\013\021\001\001\000\002\001\001\000\014\007" +
    "\147\010\016\011\024\012\025\013\021\001\001\000\002" +
    "\001\001\000\014\007\151\010\016\011\024\012\025\013" +
    "\021\001\001\000\002\001\001\000\014\007\153\010\016" +
    "\011\024\012\025\013\021\001\001\000\002\001\001\000" +
    "\014\007\155\010\016\011\024\012\025\013\021\001\001" +
    "\000\002\001\001\000\014\007\157\010\016\011\024\012" +
    "\025\013\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\215\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap<String, Integer>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


 
    public HashMap<String, Integer> table;
 
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
 
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= starter EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // starter ::= header SEP drone 
            { parser.Tree.reduce(3,"starter",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("starter",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= header1 
            { parser.Tree.reduce(1,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= header2 
            { parser.Tree.reduce(1,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= header3 
            { parser.Tree.reduce(1,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header1 ::= header2 TOK3 S nt0 
            { parser.Tree.reduce(4,"header1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header2 ::= header3 TOK3 S nt0 TOK3 S nt0 
            { parser.Tree.reduce(7,"header2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header3 ::= nt0 
            { parser.Tree.reduce(1,"header3",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header3",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nt0 ::= 
            { parser.Tree.reduce(0,"nt0",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt0",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // nt0 ::= nt0 TOK1 S 
            { parser.Tree.reduce(3,"nt0",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt0",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // nt0 ::= nt0 TOK2 S 
            { parser.Tree.reduce(3,"nt0",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt0",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // drone ::= set S coml 
            { parser.Tree.reduce(3,"drone",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drone",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // set ::= SW PW SINT SINT SINT MINUS BW SINT 
            { parser.Tree.reduce(8,"set",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer z = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.table.put("x",x); parser.table.put("y",y); parser.table.put("z",z); parser.table.put("b",b); 
                                                      System.out.println("BATTERY: " + b + " - POS: " + x + " " + y + " " + z);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // set ::= SW BW SINT MINUS PW SINT SINT SINT 
            { parser.Tree.reduce(8,"set",0);
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer z = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.table.put("x",x); parser.table.put("y",y); parser.table.put("z",z); parser.table.put("b",b); 
                                                        System.out.println("BATTERY: " + b + " - POS: " + x + " " + y + " " + z);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // coml ::= com S com S com S com S com S com S com S 
            { parser.Tree.reduce(14,"coml",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("coml",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // coml ::= coml com S com S 
            { parser.Tree.reduce(5,"coml",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("coml",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // com ::= print 
            { parser.Tree.reduce(1,"com",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("com",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // com ::= change 
            { parser.Tree.reduce(1,"com",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("com",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // com ::= compute 
            { parser.Tree.reduce(1,"com",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("com",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // com ::= incase 
            { parser.Tree.reduce(1,"com",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("com",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // print ::= PRW QSTRING 
            { parser.Tree.reduce(2,"print",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // change ::= CW PW SINT SINT SINT MINUS BW SINT 
            { parser.Tree.reduce(8,"change",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer z = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Integer nx, ny, nz, nb; nx=parser.table.get("x"); ny=parser.table.get("y"); nz=parser.table.get("z"); nb=parser.table.get("b"); 
                                                        nx+=x; ny+=y; nz+=z; nb+=b;
                                                        parser.table.put("x",nx); parser.table.put("y",ny); parser.table.put("z",nz); parser.table.put("b",nb);
                                                        System.out.println("BATTERY: " + nb + " - POS: " + nx + " " + ny + " " + nz);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("change",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // change ::= CW BW SINT MINUS PW SINT SINT SINT 
            { parser.Tree.reduce(8,"change",0);
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer z = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Integer nx, ny, nz, nb; nx=parser.table.get("x"); ny=parser.table.get("y"); nz=parser.table.get("z"); nb=parser.table.get("b"); 
                                                        nx+=x; ny+=y; nz+=z; nb+=b;
                                                        parser.table.put("x",nx); parser.table.put("y",ny); parser.table.put("z",nz); parser.table.put("b",nb);
                                                        System.out.println("BATTERY: " + nb + " - POS: " + nx + " " + ny + " " + nz);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("change",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // change ::= CW PW SINT SINT SINT 
            { parser.Tree.reduce(5,"change",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer z = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Integer nx, ny, nz, nb; nx=parser.table.get("x"); ny=parser.table.get("y"); nz=parser.table.get("z"); nb=parser.table.get("b"); 
                                                        nx+=x; ny+=y; nz+=z;
                                                        parser.table.put("x",nx); parser.table.put("y",ny); parser.table.put("z",nz);
                                                        System.out.println("BATTERY: " + nb + " - POS: " + nx + " " + ny + " " + nz);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("change",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // change ::= CW BW SINT 
            { parser.Tree.reduce(3,"change",0);
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Integer nx, ny, nz, nb; nx=parser.table.get("x"); ny=parser.table.get("y"); nz=parser.table.get("z"); nb=parser.table.get("b"); 
                                                        nb+=b;
                                                        parser.table.put("b",nb);
                                                        System.out.println("BATTERY: " + nb + " - POS: " + nx + " " + ny + " " + nz);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("change",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // compute ::= COMPW RO stat CM vl RC 
            { parser.Tree.reduce(6,"compute",0);
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer[] r = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Double result; int a,b; double tmp; if(c.equals("MAX")){System.out.println(r[0]);}else{a=r[0]; b=r[1]; tmp=(double)a; result=tmp/b; System.out.println(result);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compute",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // vl ::= val 
            { parser.Tree.reduce(1,"vl",0);
              Integer[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Integer[2]; if(((String)parser.stack(-2)).equals("MAX")){RESULT[0] = x;}else{RESULT[0]=x; RESULT[1]=1;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // vl ::= vl CM val 
            { parser.Tree.reduce(3,"vl",0);
              Integer[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer[] a = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Integer[2]; if(((String)parser.stack(-4)).equals("MAX")){if(a[0]<b){RESULT[0]=b;}else{RESULT[0]=a[0];}}else{RESULT[0]=a[0]+b; RESULT[1]=a[1]+1;} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vl",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // val ::= PX 
            { parser.Tree.reduce(1,"val",0);
              Integer RESULT =null;
		 RESULT = parser.table.get("x"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // val ::= PY 
            { parser.Tree.reduce(1,"val",0);
              Integer RESULT =null;
		 RESULT = parser.table.get("y"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // val ::= PZ 
            { parser.Tree.reduce(1,"val",0);
              Integer RESULT =null;
		 RESULT = parser.table.get("z"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // val ::= BW 
            { parser.Tree.reduce(1,"val",0);
              Integer RESULT =null;
		 RESULT = parser.table.get("b"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // val ::= SINT 
            { parser.Tree.reduce(1,"val",0);
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stat ::= AW 
            { parser.Tree.reduce(1,"stat",0);
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stat ::= MW 
            { parser.Tree.reduce(1,"stat",0);
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // incase ::= IW val cl 
            { parser.Tree.reduce(3,"incase",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("incase",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cl ::= nt2 interval DW insl DONEW 
            { parser.Tree.reduce(5,"cl",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cl ::= cl interval DW insl DONEW 
            { parser.Tree.reduce(5,"cl",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // nt2 ::= 
            { parser.Tree.reduce(0,"nt2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt2",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // interval ::= HW SINT 
            { parser.Tree.reduce(2,"interval",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= (Integer)parser.stack(-3)>a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("interval",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // interval ::= LW SINT 
            { parser.Tree.reduce(2,"interval",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= (Integer)parser.stack(-3)<a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("interval",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // interval ::= BETW SINT ANDW SINT 
            { parser.Tree.reduce(4,"interval",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= (Integer)parser.stack(-5)>=a && (Integer)parser.stack(-5)<=b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("interval",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // insl ::= nt2 ins 
            { parser.Tree.reduce(2,"insl",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // insl ::= insl ins 
            { parser.Tree.reduce(2,"insl",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ins ::= condprint S 
            { parser.Tree.reduce(2,"ins",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ins ::= condchange S 
            { parser.Tree.reduce(2,"ins",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ins",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condprint ::= PRW QSTRING 
            { parser.Tree.reduce(2,"condprint",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if((Boolean)parser.stack(-4)){System.out.println(x);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condprint",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condchange ::= CW PW SINT SINT SINT MINUS BW SINT 
            { parser.Tree.reduce(8,"condchange",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer z = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if((Boolean)parser.stack(-10)){Integer nx, ny, nz, nb; nx=parser.table.get("x"); ny=parser.table.get("y"); nz=parser.table.get("z"); nb=parser.table.get("b"); 
                                                        nx+=x; ny+=y; nz+=z; nb+=b;
                                                        parser.table.put("x",nx); parser.table.put("y",ny); parser.table.put("z",nz); parser.table.put("b",nb);
                                                        System.out.println("BATTERY: " + nb + " - POS: " + nx + " " + ny + " " + nz);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condchange",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condchange ::= CW BW SINT MINUS PW SINT SINT SINT 
            { parser.Tree.reduce(8,"condchange",0);
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer z = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if((Boolean)parser.stack(-10)){Integer nx, ny, nz, nb; nx=parser.table.get("x"); ny=parser.table.get("y"); nz=parser.table.get("z"); nb=parser.table.get("b"); 
                                                        nx+=x; ny+=y; nz+=z; nb+=b;
                                                        parser.table.put("x",nx); parser.table.put("y",ny); parser.table.put("z",nz); parser.table.put("b",nb);
                                                        System.out.println("BATTERY: " + nb + " - POS: " + nx + " " + ny + " " + nz);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condchange",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condchange ::= CW PW SINT SINT SINT 
            { parser.Tree.reduce(5,"condchange",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer z = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if((Boolean)parser.stack(-7)){Integer nx, ny, nz, nb; nx=parser.table.get("x"); ny=parser.table.get("y"); nz=parser.table.get("z"); nb=parser.table.get("b"); 
                                                        nx+=x; ny+=y; nz+=z;
                                                        parser.table.put("x",nx); parser.table.put("y",ny); parser.table.put("z",nz);
                                                        System.out.println("BATTERY: " + nb + " - POS: " + nx + " " + ny + " " + nz);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condchange",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condchange ::= CW BW SINT 
            { parser.Tree.reduce(3,"condchange",0);
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if((Boolean)parser.stack(-5)){Integer nx, ny, nz, nb; nx=parser.table.get("x"); ny=parser.table.get("y"); nz=parser.table.get("z"); nb=parser.table.get("b"); 
                                                        nb+=b;
                                                        parser.table.put("b",nb);
                                                        System.out.println("BATTERY: " + nb + " - POS: " + nx + " " + ny + " " + nz);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condchange",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
