
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\002\007\000\002\003" +
    "\011\000\002\003\011\000\002\005\005\000\002\005\002" +
    "\000\002\004\005\000\002\004\004\000\002\006\007\000" +
    "\002\007\006\000\002\007\004\000\002\014\010\000\002" +
    "\014\002\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\004\000\002\012\005\000\002\010\005" +
    "\000\002\013\006\000\002\013\006\000\002\013\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\010\005\ufffc\006\ufffc\007\ufffc\001\002\000" +
    "\010\005\067\006\066\007\065\001\002\000\004\002\064" +
    "\001\002\000\004\004\007\001\002\000\004\016\012\001" +
    "\002\000\006\004\025\016\012\001\002\000\004\016\012" +
    "\001\002\000\004\012\013\001\002\000\004\014\014\001" +
    "\002\000\004\012\016\001\002\000\006\011\020\015\021" +
    "\001\002\000\004\013\017\001\002\000\006\011\ufff7\015" +
    "\ufff7\001\002\000\004\012\022\001\002\000\006\004\ufff9" +
    "\016\ufff9\001\002\000\004\013\023\001\002\000\006\011" +
    "\ufff8\015\ufff8\001\002\000\006\004\ufffa\016\ufffa\001\002" +
    "\000\006\002\ufff5\017\ufff5\001\002\000\004\016\012\001" +
    "\002\000\006\004\ufffb\016\ufffb\001\002\000\006\002\000" +
    "\017\031\001\002\000\010\012\036\024\033\025\034\001" +
    "\002\000\010\021\052\022\044\023\046\001\002\000\010" +
    "\012\036\024\033\025\034\001\002\000\010\012\036\024" +
    "\033\025\034\001\002\000\004\027\041\001\002\000\004" +
    "\030\037\001\002\000\004\012\040\001\002\000\004\027" +
    "\uffef\001\002\000\004\013\042\001\002\000\012\021\ufff0" +
    "\022\ufff0\023\ufff0\026\ufff0\001\002\000\010\022\044\023" +
    "\046\026\045\001\002\000\010\012\036\024\033\025\034" +
    "\001\002\000\012\021\ufff2\022\ufff2\023\ufff2\026\ufff2\001" +
    "\002\000\010\012\036\024\033\025\034\001\002\000\012" +
    "\021\ufff4\022\044\023\ufff4\026\ufff4\001\002\000\012\021" +
    "\ufff3\022\ufff3\023\ufff3\026\ufff3\001\002\000\012\021\ufff1" +
    "\022\ufff1\023\ufff1\026\ufff1\001\002\000\010\020\uffec\031" +
    "\uffec\032\054\001\002\000\006\020\060\031\061\001\002" +
    "\000\004\031\055\001\002\000\004\012\056\001\002\000" +
    "\004\010\057\001\002\000\006\020\uffed\031\uffed\001\002" +
    "\000\006\002\ufff6\017\ufff6\001\002\000\004\012\062\001" +
    "\002\000\004\010\063\001\002\000\006\020\uffee\031\uffee" +
    "\001\002\000\004\002\001\001\002\000\004\010\102\001" +
    "\002\000\004\010\075\001\002\000\004\010\070\001\002" +
    "\000\006\006\ufffc\007\ufffc\001\002\000\006\006\072\007" +
    "\065\001\002\000\004\010\073\001\002\000\006\004\ufffc" +
    "\007\ufffc\001\002\000\006\004\uffff\007\065\001\002\000" +
    "\006\005\ufffc\007\ufffc\001\002\000\006\005\077\007\065" +
    "\001\002\000\004\010\100\001\002\000\006\004\ufffc\007" +
    "\ufffc\001\002\000\006\004\ufffe\007\065\001\002\000\012" +
    "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\010\002\004\003\005\005\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\007\006\010\001\001\000\004\006\025\001\001\000" +
    "\004\006\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\027\001\001\000\004\006\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\034\012\031\001" +
    "\001\000\002\001\001\000\006\010\034\012\050\001\001" +
    "\000\006\010\034\012\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\034\012\047\001\001\000\002\001\001\000\006\010\034" +
    "\012\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\073\001\001\000\002\001\001\000\004\005\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\100\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap<String, HashMap<String, Integer>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


 
    public HashMap<String, HashMap<String, Integer>> table;
 
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
 
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= starter EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // starter ::= header SEP houses SEP preferences 
            { parser.Tree.reduce(5,"starter",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("starter",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= tok3rep TOK1 S tok3rep TOK2 S tok3rep 
            { parser.Tree.reduce(7,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= tok3rep TOK2 S tok3rep TOK1 S tok3rep 
            { parser.Tree.reduce(7,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tok3rep ::= tok3rep TOK3 S 
            { parser.Tree.reduce(3,"tok3rep",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok3rep",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tok3rep ::= 
            { parser.Tree.reduce(0,"tok3rep",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok3rep",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // houses ::= houses house house 
            { parser.Tree.reduce(3,"houses",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("houses",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // houses ::= house house 
            { parser.Tree.reduce(2,"houses",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("houses",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // house ::= HOUSE QSTRING START_S room_list END_S 
            { parser.Tree.reduce(5,"house",0);
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Integer> x = (HashMap<String,Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        parser.table.put(type,x);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("house",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // room_list ::= room_list CM QSTRING UINT 
            { parser.Tree.reduce(4,"room_list",0);
              HashMap<String,Integer> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		HashMap<String,Integer> x = (HashMap<String,Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer size = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    x.put(name,size);
    RESULT = x;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("room_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // room_list ::= QSTRING UINT 
            { parser.Tree.reduce(2,"room_list",0);
              HashMap<String,Integer> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer size = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    HashMap<String, Integer> roomList = new HashMap<String, Integer>();
    roomList.put(name,size);
    RESULT = roomList;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("room_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // preferences ::= preferences IF bexpr THEN print_list FI 
            { parser.Tree.reduce(6,"preferences",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("preferences",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // preferences ::= 
            { parser.Tree.reduce(0,"preferences",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("preferences",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bexpr ::= bexpr OR bexpr 
            { parser.Tree.reduce(3,"bexpr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a || b; System.out.println("here"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bexpr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bexpr ::= bexpr AND bexpr 
            { parser.Tree.reduce(3,"bexpr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a && b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bexpr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bexpr ::= RO bexpr RC 
            { parser.Tree.reduce(3,"bexpr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bexpr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bexpr ::= NOT bexpr 
            { parser.Tree.reduce(2,"bexpr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = !a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bexpr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bexpr ::= roomref EQEQ UINT 
            { parser.Tree.reduce(3,"bexpr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            System.out.println(c + "here" + a);
            if((Integer)a == (Integer)c) RESULT = true;
            else RESULT = false;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bexpr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // roomref ::= QSTRING DOT QSTRING 
            { parser.Tree.reduce(3,"roomref",0);
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int roomnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int roomnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String roomname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    HashMap<String,Integer> roomList = parser.table.get(type);
    Integer size = roomList.get(roomname);
    RESULT = size;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("roomref",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // print_list ::= print_list PRINT QSTRING S 
            { parser.Tree.reduce(4,"print_list",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Boolean value =  (Boolean)parser.stack(-5);
    if(value == true) System.out.println(x);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // print_list ::= N PRINT QSTRING S 
            { parser.Tree.reduce(4,"print_list",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Boolean value =  (Boolean)parser.stack(-5);
    if(value == true) System.out.println(x);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // print_list ::= 
            { parser.Tree.reduce(0,"print_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
