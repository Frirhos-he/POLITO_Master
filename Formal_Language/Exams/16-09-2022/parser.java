
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\006\000\002\003\017\000\002\025\005" +
    "\000\002\025\005\000\002\025\002\000\002\023\025\000" +
    "\002\022\004\000\002\022\002\000\002\021\004\000\002" +
    "\021\004\000\002\021\002\000\002\020\004\000\002\020" +
    "\002\000\002\024\005\000\002\024\031\000\002\024\037" +
    "\000\002\017\003\000\002\017\003\000\002\004\002\000" +
    "\002\004\003\000\002\005\006\000\002\005\005\000\002" +
    "\006\003\000\002\006\003\000\002\007\005\000\002\010" +
    "\005\000\002\013\004\000\002\013\003\000\002\014\007" +
    "\000\002\012\003\000\002\015\007\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\004\000\002" +
    "\011\003\000\002\011\003\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\012\004\ufffa\005\ufffa\007\ufffa\035\ufffa\001" +
    "\002\000\012\004\uffff\005\064\007\062\035\063\001\002" +
    "\000\004\002\061\001\002\000\004\004\007\001\002\000" +
    "\010\002\uffec\011\012\020\016\001\002\000\004\002\000" +
    "\001\002\000\010\002\uffeb\011\012\020\016\001\002\000" +
    "\014\014\021\016\024\020\025\024\022\025\023\001\002" +
    "\000\010\002\uffe7\011\uffe7\020\uffe7\001\002\000\006\011" +
    "\012\020\016\001\002\000\010\002\uffe8\011\uffe8\020\uffe8" +
    "\001\002\000\004\033\017\001\002\000\014\014\021\016" +
    "\024\020\025\024\022\025\023\001\002\000\014\002\uffe6" +
    "\011\uffe6\012\027\013\031\020\uffe6\001\002\000\014\014" +
    "\021\016\024\020\025\024\022\025\023\001\002\000\022" +
    "\002\uffdb\011\uffdb\012\uffdb\013\uffdb\017\uffdb\020\uffdb\026" +
    "\uffdb\030\uffdb\001\002\000\022\002\uffda\011\uffda\012\uffda" +
    "\013\uffda\017\uffda\020\uffda\026\uffda\030\uffda\001\002\000" +
    "\014\014\021\016\024\020\025\024\022\025\023\001\002" +
    "\000\022\002\uffd9\011\uffd9\012\uffd9\013\uffd9\017\uffd9\020" +
    "\uffd9\026\uffd9\030\uffd9\001\002\000\010\012\027\013\031" +
    "\017\030\001\002\000\014\014\021\016\024\020\025\024" +
    "\022\025\023\001\002\000\022\002\uffdd\011\uffdd\012\uffdd" +
    "\013\uffdd\017\uffdd\020\uffdd\026\uffdd\030\uffdd\001\002\000" +
    "\014\014\021\016\024\020\025\024\022\025\023\001\002" +
    "\000\022\002\uffdf\011\uffdf\012\027\013\uffdf\017\uffdf\020" +
    "\uffdf\026\uffdf\030\uffdf\001\002\000\022\002\uffde\011\uffde" +
    "\012\uffde\013\uffde\017\uffde\020\uffde\026\uffde\030\uffde\001" +
    "\002\000\022\002\uffdc\011\uffdc\012\uffdc\013\uffdc\017\uffdc" +
    "\020\uffdc\026\uffdc\030\uffdc\001\002\000\006\011\012\020" +
    "\016\001\002\000\006\011\012\020\016\001\002\000\010" +
    "\002\uffea\011\uffea\020\uffea\001\002\000\010\012\027\013" +
    "\031\026\043\001\002\000\012\002\uffe5\011\uffe5\020\uffe5" +
    "\026\043\001\002\000\012\002\uffe3\011\uffe3\020\uffe3\026" +
    "\uffe3\001\002\000\014\014\021\016\024\020\025\024\022" +
    "\025\023\001\002\000\010\012\027\013\031\030\uffe1\001" +
    "\002\000\004\030\046\001\002\000\004\027\047\001\002" +
    "\000\004\016\052\001\002\000\004\031\051\001\002\000" +
    "\012\002\uffe2\011\uffe2\020\uffe2\026\uffe2\001\002\000\004" +
    "\032\053\001\002\000\004\017\054\001\002\000\004\010" +
    "\055\001\002\000\004\031\uffe0\001\002\000\012\002\uffe4" +
    "\011\uffe4\020\uffe4\026\uffe4\001\002\000\006\011\012\020" +
    "\016\001\002\000\010\002\uffe9\011\uffe9\020\uffe9\001\002" +
    "\000\004\002\001\001\002\000\004\010\167\001\002\000" +
    "\006\014\131\034\133\001\002\000\006\021\ufff2\022\ufff2" +
    "\001\002\000\004\010\070\001\002\000\004\010\067\001" +
    "\002\000\012\004\ufffc\005\ufffc\007\ufffc\035\ufffc\001\002" +
    "\000\012\004\ufffa\005\ufffa\007\ufffa\035\ufffa\001\002\000" +
    "\012\004\ufffe\005\064\007\062\035\063\001\002\000\004" +
    "\010\073\001\002\000\010\005\ufffa\007\ufffa\035\ufffa\001" +
    "\002\000\010\005\064\007\062\035\063\001\002\000\004" +
    "\010\076\001\002\000\010\005\ufffa\007\ufffa\035\ufffa\001" +
    "\002\000\010\005\064\007\062\035\063\001\002\000\004" +
    "\010\101\001\002\000\010\004\ufffa\005\ufffa\007\ufffa\001" +
    "\002\000\010\004\ufffd\005\064\007\062\001\002\000\006" +
    "\021\105\022\104\001\002\000\006\021\ufff3\022\ufff3\001" +
    "\002\000\006\021\ufff2\022\ufff2\001\002\000\006\021\107" +
    "\022\104\001\002\000\006\021\ufff2\022\ufff2\001\002\000" +
    "\006\021\111\022\104\001\002\000\006\021\ufff2\022\ufff2" +
    "\001\002\000\006\021\113\022\104\001\002\000\006\021" +
    "\ufff2\022\ufff2\001\002\000\006\021\115\022\104\001\002" +
    "\000\006\021\ufff2\022\ufff2\001\002\000\006\021\117\022" +
    "\104\001\002\000\010\021\ufff4\022\ufff4\023\ufff4\001\002" +
    "\000\010\021\123\022\121\023\122\001\002\000\010\021" +
    "\ufff6\022\ufff6\023\ufff6\001\002\000\004\023\124\001\002" +
    "\000\010\021\ufff5\022\ufff5\023\ufff5\001\002\000\004\023" +
    "\125\001\002\000\004\023\126\001\002\000\006\010\ufff7" +
    "\023\ufff7\001\002\000\006\010\ufff9\023\130\001\002\000" +
    "\006\010\ufff8\023\ufff8\001\002\000\004\035\uffed\001\002" +
    "\000\004\035\134\001\002\000\004\035\uffee\001\002\000" +
    "\010\010\ufff1\014\131\034\133\001\002\000\004\035\136" +
    "\001\002\000\006\014\131\034\133\001\002\000\004\035" +
    "\140\001\002\000\006\014\131\034\133\001\002\000\004" +
    "\035\142\001\002\000\006\014\131\034\133\001\002\000" +
    "\004\035\144\001\002\000\006\014\131\034\133\001\002" +
    "\000\004\035\146\001\002\000\006\014\131\034\133\001" +
    "\002\000\004\035\150\001\002\000\006\014\131\034\133" +
    "\001\002\000\004\035\152\001\002\000\006\014\131\034" +
    "\133\001\002\000\004\035\154\001\002\000\006\014\131" +
    "\034\133\001\002\000\004\035\156\001\002\000\006\014" +
    "\131\034\133\001\002\000\004\035\160\001\002\000\010" +
    "\010\ufff0\014\131\034\133\001\002\000\004\035\162\001" +
    "\002\000\006\014\131\034\133\001\002\000\004\035\164" +
    "\001\002\000\006\014\131\034\133\001\002\000\004\035" +
    "\166\001\002\000\004\010\uffef\001\002\000\012\004\ufffb" +
    "\005\ufffb\007\ufffb\035\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\010\002\004\003\005\025\003\001\001\000" +
    "\006\023\065\024\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\007\005\010\006\013\007\014\010" +
    "\012\001\001\000\002\001\001\000\010\006\056\007\014" +
    "\010\012\001\001\000\004\011\037\001\001\000\002\001" +
    "\001\000\010\006\034\007\014\010\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\017\001\001\000" +
    "\002\001\001\000\004\011\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\032\001\001\000\002" +
    "\001\001\000\004\011\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\035\007\014" +
    "\010\012\001\001\000\010\006\036\007\014\010\012\001" +
    "\001\000\002\001\001\000\006\013\040\014\041\001\001" +
    "\000\004\014\055\001\001\000\002\001\001\000\006\011" +
    "\043\012\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\057\007\014\010\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\131\001" +
    "\001\000\004\020\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\070\001\001\000" +
    "\006\023\065\024\071\001\001\000\002\001\001\000\004" +
    "\025\073\001\001\000\006\023\065\024\074\001\001\000" +
    "\002\001\001\000\004\025\076\001\001\000\006\023\065" +
    "\024\077\001\001\000\002\001\001\000\004\025\101\001" +
    "\001\000\004\023\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\105\001\001\000\002\001\001\000" +
    "\004\020\107\001\001\000\002\001\001\000\004\020\111" +
    "\001\001\000\002\001\001\000\004\020\113\001\001\000" +
    "\002\001\001\000\004\020\115\001\001\000\002\001\001" +
    "\000\004\021\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\134\001\001\000\002\001" +
    "\001\000\004\017\136\001\001\000\002\001\001\000\004" +
    "\017\140\001\001\000\002\001\001\000\004\017\142\001" +
    "\001\000\002\001\001\000\004\017\144\001\001\000\002" +
    "\001\001\000\004\017\146\001\001\000\002\001\001\000" +
    "\004\017\150\001\001\000\002\001\001\000\004\017\152" +
    "\001\001\000\002\001\001\000\004\017\154\001\001\000" +
    "\002\001\001\000\004\017\156\001\001\000\002\001\001" +
    "\000\004\017\160\001\001\000\002\001\001\000\004\017" +
    "\162\001\001\000\002\001\001\000\004\017\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    table = new HashMap<String, Boolean>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


 
    public HashMap<String, Boolean> table;
 
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
 
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= starter EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // starter ::= header SEP command_section 
            { parser.Tree.reduce(3,"starter",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("starter",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= tokenCombination 
            { parser.Tree.reduce(1,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= tokenCombination token2 S tokenCombination 
            { parser.Tree.reduce(4,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= tokenCombination token2 S tokenCombination token2 S tokenCombination token2 S tokenCombination token2 S tokenCombination 
            { parser.Tree.reduce(13,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tokenCombination ::= tokenCombination token1 S 
            { parser.Tree.reduce(3,"tokenCombination",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tokenCombination",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tokenCombination ::= tokenCombination TOK3 S 
            { parser.Tree.reduce(3,"tokenCombination",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tokenCombination",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tokenCombination ::= 
            { parser.Tree.reduce(0,"tokenCombination",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tokenCombination",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // token1 ::= TOK1 repetition_lowercase UPPERCASE repetition_lowercase UPPERCASE repetition_lowercase UPPERCASE repetition_lowercase UPPERCASE repetition_lowercase UPPERCASE repetition_lowercase UPPERCASE repetition WORDS WORDS WORDS WORDS repetition_words 
            { parser.Tree.reduce(19,"token1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("token1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // repetition_words ::= repetition_words WORDS 
            { parser.Tree.reduce(2,"repetition_words",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repetition_words",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // repetition_words ::= 
            { parser.Tree.reduce(0,"repetition_words",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repetition_words",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // repetition ::= repetition LOWERCASE 
            { parser.Tree.reduce(2,"repetition",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repetition",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // repetition ::= repetition UPPERCASE 
            { parser.Tree.reduce(2,"repetition",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repetition",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // repetition ::= 
            { parser.Tree.reduce(0,"repetition",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repetition",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // repetition_lowercase ::= repetition_lowercase LOWERCASE 
            { parser.Tree.reduce(2,"repetition_lowercase",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repetition_lowercase",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // repetition_lowercase ::= 
            { parser.Tree.reduce(0,"repetition_lowercase",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repetition_lowercase",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // token2 ::= EMAIL sep_tok2 EMAIL 
            { parser.Tree.reduce(3,"token2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("token2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // token2 ::= EMAIL sep_tok2 EMAIL sep_tok2 EMAIL sep_tok2 EMAIL sep_tok2 EMAIL sep_tok2 EMAIL sep_tok2 EMAIL sep_tok2 EMAIL sep_tok2 EMAIL sep_tok2 EMAIL sep_tok2 EMAIL sep_tok2 EMAIL 
            { parser.Tree.reduce(23,"token2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("token2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // token2 ::= EMAIL sep_tok2 EMAIL sep_tok2 EMAIL sep_tok2 EMAIL sep_tok2 EMAIL sep_tok2 EMAIL sep_tok2 EMAIL sep_tok2 EMAIL sep_tok2 EMAIL sep_tok2 EMAIL sep_tok2 EMAIL sep_tok2 EMAIL sep_tok2 EMAIL sep_tok2 EMAIL sep_tok2 EMAIL 
            { parser.Tree.reduce(29,"token2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("token2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-28)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sep_tok2 ::= DIV 
            { parser.Tree.reduce(1,"sep_tok2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sep_tok2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sep_tok2 ::= NOT 
            { parser.Tree.reduce(1,"sep_tok2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sep_tok2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // command_section ::= 
            { parser.Tree.reduce(0,"command_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_section",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // command_section ::= list_command 
            { parser.Tree.reduce(1,"command_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_section",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // list_command ::= command command command command 
            { parser.Tree.reduce(4,"list_command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // list_command ::= list_command command command 
            { parser.Tree.reduce(3,"list_command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // command ::= assignment 
            { parser.Tree.reduce(1,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // command ::= cmp 
            { parser.Tree.reduce(1,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // assignment ::= VARIABLE EQ bexpr 
            { parser.Tree.reduce(3,"assignment",0);
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int boolsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean bools = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            parser.table.put(var,bools);
            System.out.println("Variable "+var + " Value:"+ bools);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cmp ::= CMP bexpr action_lists 
            { parser.Tree.reduce(3,"cmp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // action_lists ::= action_lists action_v 
            { parser.Tree.reduce(2,"action_lists",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_lists",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // action_lists ::= action_v 
            { parser.Tree.reduce(1,"action_lists",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_lists",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // action_v ::= WITH bool_expr_a SO print SC 
            { parser.Tree.reduce(5,"action_v",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_v",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bool_expr_a ::= bexpr 
            { parser.Tree.reduce(1,"bool_expr_a",0);
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expr_a",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // print ::= PRINT RO QSTRING RC S 
            { parser.Tree.reduce(5,"print",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bexpr ::= bexpr OR bexpr 
            { parser.Tree.reduce(3,"bexpr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a || b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bexpr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bexpr ::= bexpr AND bexpr 
            { parser.Tree.reduce(3,"bexpr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a && b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bexpr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bexpr ::= RO bexpr RC 
            { parser.Tree.reduce(3,"bexpr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bexpr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bexpr ::= NOT bexpr 
            { parser.Tree.reduce(2,"bexpr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = !a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bexpr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bexpr ::= T 
            { parser.Tree.reduce(1,"bexpr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bexpr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bexpr ::= F 
            { parser.Tree.reduce(1,"bexpr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bexpr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bexpr ::= VARIABLE 
            { parser.Tree.reduce(1,"bexpr",0);
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Boolean res = parser.table.get(a);
            RESULT = res;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bexpr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
